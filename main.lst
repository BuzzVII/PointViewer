GAS LISTING /tmp/ccJa8FUH.s 			page 1


   1              		.file	"main.cpp"
   2              		.text
   3              	.Ltext0:
   4              		.local	_ZStL8__ioinit
   5              		.comm	_ZStL8__ioinit,1,1
   6              		.globl	_Z11resetPointsPSt6vectorI5pointSaIS0_EEPd
   8              	_Z11resetPointsPSt6vectorI5pointSaIS0_EEPd:
   9              	.LFB1465:
  10              		.file 1 "main.cpp"
   1:main.cpp      **** #include <math.h>
   2:main.cpp      **** #include <time.h>
   3:main.cpp      **** #include <iostream>
   4:main.cpp      **** #include <string>
   5:main.cpp      **** #include <vector>
   6:main.cpp      **** #include <fstream>
   7:main.cpp      **** #include <algorithm>
   8:main.cpp      **** 
   9:main.cpp      **** #include "load_points.h"
  10:main.cpp      **** 
  11:main.cpp      **** // open gl includes
  12:main.cpp      **** #include <GL/glfw.h>
  13:main.cpp      **** 
  14:main.cpp      **** 
  15:main.cpp      **** //PointViewer version 0.2
  16:main.cpp      **** 
  17:main.cpp      **** void resetPoints(Points *pPset, double *pDims);
  18:main.cpp      **** 
  19:main.cpp      **** void resetPoints(Points *pPset, double *pDims){
  11              		.loc 1 19 0
  12              		.cfi_startproc
  13 0000 55       		pushq	%rbp
  14              	.LCFI0:
  15              		.cfi_def_cfa_offset 16
  16              		.cfi_offset 6, -16
  17 0001 4889E5   		movq	%rsp, %rbp
  18              	.LCFI1:
  19              		.cfi_def_cfa_register 6
  20 0004 4154     		pushq	%r12
  21 0006 53       		pushq	%rbx
  22 0007 4883EC30 		subq	$48, %rsp
  23 000b 48897DD8 		movq	%rdi, -40(%rbp)
  24 000f 488975D0 		movq	%rsi, -48(%rbp)
  25              	.LBB2:
  20:main.cpp      **** 
  21:main.cpp      **** 	glBegin(GL_POINTS);
  26              		.loc 1 21 0
  27 0013 BF000000 		movl	$0, %edi
  27      00
  28              		.cfi_offset 3, -32
  29              		.cfi_offset 12, -24
  30 0018 E8000000 		call	glBegin
  30      00
  31              	.LBB3:
  22:main.cpp      **** 	for(int count=0;count < (*pPset).size();count++){
  32              		.loc 1 22 0
  33 001d C745EC00 		movl	$0, -20(%rbp)
  33      000000
GAS LISTING /tmp/ccJa8FUH.s 			page 2


  34 0024 E9250200 		jmp	.L2
  34      00
  35              	.L8:
  23:main.cpp      **** 		if(pDims[4]==1) glColor3ub((*pPset)[count].r, (*pPset)[count].g, (*pPset)[count].b);
  36              		.loc 1 23 0
  37 0029 488B45D0 		movq	-48(%rbp), %rax
  38 002d 4883C020 		addq	$32, %rax
  39 0031 F20F1000 		movsd	(%rax), %xmm0
  40 0035 F20F100D 		movsd	.LC0(%rip), %xmm1
  40      00000000 
  41 003d 660F2EC1 		ucomisd	%xmm1, %xmm0
  42 0041 7A71     		jp	.L3
  43 0043 F20F100D 		movsd	.LC0(%rip), %xmm1
  43      00000000 
  44 004b 660F2EC1 		ucomisd	%xmm1, %xmm0
  45 004f 7563     		jne	.L3
  46              	.L9:
  47              		.loc 1 23 0 is_stmt 0 discriminator 1
  48 0051 8B45EC   		movl	-20(%rbp), %eax
  49 0054 4863D0   		movslq	%eax, %rdx
  50 0057 488B45D8 		movq	-40(%rbp), %rax
  51 005b 4889D6   		movq	%rdx, %rsi
  52 005e 4889C7   		movq	%rax, %rdi
  53 0061 E8000000 		call	_ZNSt6vectorI5pointSaIS0_EEixEm
  53      00
  54 0066 8B4030   		movl	48(%rax), %eax
  55 0069 440FB6E0 		movzbl	%al, %r12d
  56 006d 8B45EC   		movl	-20(%rbp), %eax
  57 0070 4863D0   		movslq	%eax, %rdx
  58 0073 488B45D8 		movq	-40(%rbp), %rax
  59 0077 4889D6   		movq	%rdx, %rsi
  60 007a 4889C7   		movq	%rax, %rdi
  61 007d E8000000 		call	_ZNSt6vectorI5pointSaIS0_EEixEm
  61      00
  62 0082 8B402C   		movl	44(%rax), %eax
  63 0085 0FB6D8   		movzbl	%al, %ebx
  64 0088 8B45EC   		movl	-20(%rbp), %eax
  65 008b 4863D0   		movslq	%eax, %rdx
  66 008e 488B45D8 		movq	-40(%rbp), %rax
  67 0092 4889D6   		movq	%rdx, %rsi
  68 0095 4889C7   		movq	%rax, %rdi
  69 0098 E8000000 		call	_ZNSt6vectorI5pointSaIS0_EEixEm
  69      00
  70 009d 8B4028   		movl	40(%rax), %eax
  71 00a0 0FB6C0   		movzbl	%al, %eax
  72 00a3 4489E2   		movl	%r12d, %edx
  73 00a6 89DE     		movl	%ebx, %esi
  74 00a8 89C7     		movl	%eax, %edi
  75 00aa E8000000 		call	glColor3ub
  75      00
  76 00af E9940000 		jmp	.L5
  76      00
  77              	.L3:
  24:main.cpp      **** 		else if(pDims[4]==0) glColor3ub((*pPset)[count].I, (*pPset)[count].I, (*pPset)[count].I);
  78              		.loc 1 24 0 is_stmt 1
  79 00b4 488B45D0 		movq	-48(%rbp), %rax
  80 00b8 4883C020 		addq	$32, %rax
GAS LISTING /tmp/ccJa8FUH.s 			page 3


  81 00bc F20F1000 		movsd	(%rax), %xmm0
  82 00c0 660F57C9 		xorpd	%xmm1, %xmm1
  83 00c4 660F2EC1 		ucomisd	%xmm1, %xmm0
  84 00c8 7A6A     		jp	.L6
  85 00ca 660F57C9 		xorpd	%xmm1, %xmm1
  86 00ce 660F2EC1 		ucomisd	%xmm1, %xmm0
  87 00d2 7560     		jne	.L6
  88              	.L10:
  89              		.loc 1 24 0 is_stmt 0 discriminator 1
  90 00d4 8B45EC   		movl	-20(%rbp), %eax
  91 00d7 4863D0   		movslq	%eax, %rdx
  92 00da 488B45D8 		movq	-40(%rbp), %rax
  93 00de 4889D6   		movq	%rdx, %rsi
  94 00e1 4889C7   		movq	%rax, %rdi
  95 00e4 E8000000 		call	_ZNSt6vectorI5pointSaIS0_EEixEm
  95      00
  96 00e9 8B4024   		movl	36(%rax), %eax
  97 00ec 440FB6E0 		movzbl	%al, %r12d
  98 00f0 8B45EC   		movl	-20(%rbp), %eax
  99 00f3 4863D0   		movslq	%eax, %rdx
 100 00f6 488B45D8 		movq	-40(%rbp), %rax
 101 00fa 4889D6   		movq	%rdx, %rsi
 102 00fd 4889C7   		movq	%rax, %rdi
 103 0100 E8000000 		call	_ZNSt6vectorI5pointSaIS0_EEixEm
 103      00
 104 0105 8B4024   		movl	36(%rax), %eax
 105 0108 0FB6D8   		movzbl	%al, %ebx
 106 010b 8B45EC   		movl	-20(%rbp), %eax
 107 010e 4863D0   		movslq	%eax, %rdx
 108 0111 488B45D8 		movq	-40(%rbp), %rax
 109 0115 4889D6   		movq	%rdx, %rsi
 110 0118 4889C7   		movq	%rax, %rdi
 111 011b E8000000 		call	_ZNSt6vectorI5pointSaIS0_EEixEm
 111      00
 112 0120 8B4024   		movl	36(%rax), %eax
 113 0123 0FB6C0   		movzbl	%al, %eax
 114 0126 4489E2   		movl	%r12d, %edx
 115 0129 89DE     		movl	%ebx, %esi
 116 012b 89C7     		movl	%eax, %edi
 117 012d E8000000 		call	glColor3ub
 117      00
 118 0132 EB14     		jmp	.L5
 119              	.L6:
  25:main.cpp      **** 		else glColor3ub(100,100,100);
 120              		.loc 1 25 0 is_stmt 1
 121 0134 BA640000 		movl	$100, %edx
 121      00
 122 0139 BE640000 		movl	$100, %esi
 122      00
 123 013e BF640000 		movl	$100, %edi
 123      00
 124 0143 E8000000 		call	glColor3ub
 124      00
 125              	.L5:
  26:main.cpp      **** 		glVertex3f( ( (*pPset)[count].x - pDims[1] )/ pDims[0] * 2.f -1.f , ((*pPset)[count].z - pDims[3]
 126              		.loc 1 26 0
 127 0148 8B45EC   		movl	-20(%rbp), %eax
GAS LISTING /tmp/ccJa8FUH.s 			page 4


 128 014b 4863D0   		movslq	%eax, %rdx
 129 014e 488B45D8 		movq	-40(%rbp), %rax
 130 0152 4889D6   		movq	%rdx, %rsi
 131 0155 4889C7   		movq	%rax, %rdi
 132 0158 E8000000 		call	_ZNSt6vectorI5pointSaIS0_EEixEm
 132      00
 133 015d F20F1040 		movsd	8(%rax), %xmm0
 133      08
 134 0162 488B45D0 		movq	-48(%rbp), %rax
 135 0166 4883C010 		addq	$16, %rax
 136 016a F20F1008 		movsd	(%rax), %xmm1
 137 016e F20F5CC1 		subsd	%xmm1, %xmm0
 138 0172 488B45D0 		movq	-48(%rbp), %rax
 139 0176 F20F1008 		movsd	(%rax), %xmm1
 140 017a F20F5EC1 		divsd	%xmm1, %xmm0
 141 017e F20F58C0 		addsd	%xmm0, %xmm0
 142 0182 F20F100D 		movsd	.LC0(%rip), %xmm1
 142      00000000 
 143 018a F20F5CC1 		subsd	%xmm1, %xmm0
 144 018e 660F14C0 		unpcklpd	%xmm0, %xmm0
 145 0192 660F5AC0 		cvtpd2ps	%xmm0, %xmm0
 146 0196 F30F1145 		movss	%xmm0, -52(%rbp)
 146      CC
 147 019b 8B45EC   		movl	-20(%rbp), %eax
 148 019e 4863D0   		movslq	%eax, %rdx
 149 01a1 488B45D8 		movq	-40(%rbp), %rax
 150 01a5 4889D6   		movq	%rdx, %rsi
 151 01a8 4889C7   		movq	%rax, %rdi
 152 01ab E8000000 		call	_ZNSt6vectorI5pointSaIS0_EEixEm
 152      00
 153 01b0 F20F1040 		movsd	16(%rax), %xmm0
 153      10
 154 01b5 488B45D0 		movq	-48(%rbp), %rax
 155 01b9 4883C018 		addq	$24, %rax
 156 01bd F20F1008 		movsd	(%rax), %xmm1
 157 01c1 F20F5CC1 		subsd	%xmm1, %xmm0
 158 01c5 488B45D0 		movq	-48(%rbp), %rax
 159 01c9 F20F1008 		movsd	(%rax), %xmm1
 160 01cd F20F5EC1 		divsd	%xmm1, %xmm0
 161 01d1 F20F58C0 		addsd	%xmm0, %xmm0
 162 01d5 F20F100D 		movsd	.LC0(%rip), %xmm1
 162      00000000 
 163 01dd F20F5CC1 		subsd	%xmm1, %xmm0
 164 01e1 660F14C0 		unpcklpd	%xmm0, %xmm0
 165 01e5 660F5AC0 		cvtpd2ps	%xmm0, %xmm0
 166 01e9 F30F1145 		movss	%xmm0, -56(%rbp)
 166      C8
 167 01ee 8B45EC   		movl	-20(%rbp), %eax
 168 01f1 4863D0   		movslq	%eax, %rdx
 169 01f4 488B45D8 		movq	-40(%rbp), %rax
 170 01f8 4889D6   		movq	%rdx, %rsi
 171 01fb 4889C7   		movq	%rax, %rdi
 172 01fe E8000000 		call	_ZNSt6vectorI5pointSaIS0_EEixEm
 172      00
 173 0203 F20F1000 		movsd	(%rax), %xmm0
 174 0207 488B45D0 		movq	-48(%rbp), %rax
 175 020b 4883C008 		addq	$8, %rax
GAS LISTING /tmp/ccJa8FUH.s 			page 5


 176 020f F20F1008 		movsd	(%rax), %xmm1
 177 0213 F20F5CC1 		subsd	%xmm1, %xmm0
 178 0217 488B45D0 		movq	-48(%rbp), %rax
 179 021b F20F1008 		movsd	(%rax), %xmm1
 180 021f F20F5EC1 		divsd	%xmm1, %xmm0
 181 0223 F20F58C0 		addsd	%xmm0, %xmm0
 182 0227 F20F100D 		movsd	.LC0(%rip), %xmm1
 182      00000000 
 183 022f F20F5CC1 		subsd	%xmm1, %xmm0
 184 0233 660F14C0 		unpcklpd	%xmm0, %xmm0
 185 0237 660F5AC0 		cvtpd2ps	%xmm0, %xmm0
 186 023b F30F1055 		movss	-52(%rbp), %xmm2
 186      CC
 187 0240 F30F104D 		movss	-56(%rbp), %xmm1
 187      C8
 188 0245 E8000000 		call	glVertex3f
 188      00
  22:main.cpp      **** 	for(int count=0;count < (*pPset).size();count++){
 189              		.loc 1 22 0
 190 024a 8345EC01 		addl	$1, -20(%rbp)
 191              	.L2:
  22:main.cpp      **** 	for(int count=0;count < (*pPset).size();count++){
 192              		.loc 1 22 0 is_stmt 0 discriminator 1
 193 024e 8B45EC   		movl	-20(%rbp), %eax
 194 0251 4863D8   		movslq	%eax, %rbx
 195 0254 488B45D8 		movq	-40(%rbp), %rax
 196 0258 4889C7   		movq	%rax, %rdi
 197 025b E8000000 		call	_ZNKSt6vectorI5pointSaIS0_EE4sizeEv
 197      00
 198 0260 4839C3   		cmpq	%rax, %rbx
 199 0263 0F92C0   		setb	%al
 200 0266 84C0     		testb	%al, %al
 201 0268 0F85BBFD 		jne	.L8
 201      FFFF
 202              	.LBE3:
  27:main.cpp      **** 	}
  28:main.cpp      **** 
  29:main.cpp      **** 	glEnd();
 203              		.loc 1 29 0 is_stmt 1
 204 026e E8000000 		call	glEnd
 204      00
 205              	.LBE2:
  30:main.cpp      **** 
  31:main.cpp      **** }
 206              		.loc 1 31 0
 207 0273 4883C430 		addq	$48, %rsp
 208 0277 5B       		popq	%rbx
 209 0278 415C     		popq	%r12
 210 027a 5D       		popq	%rbp
 211              	.LCFI2:
 212              		.cfi_def_cfa 7, 8
 213 027b C3       		ret
 214              		.cfi_endproc
 215              	.LFE1465:
 217              		.globl	_Z8drawaxesPfS_S_
 219              	_Z8drawaxesPfS_S_:
 220              	.LFB1466:
GAS LISTING /tmp/ccJa8FUH.s 			page 6


  32:main.cpp      **** 
  33:main.cpp      **** void drawaxes(float *pxax, float *pyax, float *pzax);
  34:main.cpp      **** 
  35:main.cpp      **** void drawaxes(float *pxax, float *pyax, float *pzax){
 221              		.loc 1 35 0
 222              		.cfi_startproc
 223 027c 55       		pushq	%rbp
 224              	.LCFI3:
 225              		.cfi_def_cfa_offset 16
 226              		.cfi_offset 6, -16
 227 027d 4889E5   		movq	%rsp, %rbp
 228              	.LCFI4:
 229              		.cfi_def_cfa_register 6
 230 0280 4883EC20 		subq	$32, %rsp
 231 0284 48897DF8 		movq	%rdi, -8(%rbp)
 232 0288 488975F0 		movq	%rsi, -16(%rbp)
 233 028c 488955E8 		movq	%rdx, -24(%rbp)
  36:main.cpp      **** 	glBegin(GL_LINES);
 234              		.loc 1 36 0
 235 0290 BF010000 		movl	$1, %edi
 235      00
 236 0295 E8000000 		call	glBegin
 236      00
  37:main.cpp      **** 	glColor3ub(255,0,0);
 237              		.loc 1 37 0
 238 029a BA000000 		movl	$0, %edx
 238      00
 239 029f BE000000 		movl	$0, %esi
 239      00
 240 02a4 BFFF0000 		movl	$255, %edi
 240      00
 241 02a9 E8000000 		call	glColor3ub
 241      00
  38:main.cpp      **** 	glVertex3f(0.f * pzax[0], 0.f * pzax[1],0.f * pzax[2]);
 242              		.loc 1 38 0
 243 02ae 488B45E8 		movq	-24(%rbp), %rax
 244 02b2 4883C008 		addq	$8, %rax
 245 02b6 F30F1008 		movss	(%rax), %xmm1
 246 02ba 0F57C0   		xorps	%xmm0, %xmm0
 247 02bd 0F28D1   		movaps	%xmm1, %xmm2
 248 02c0 F30F59D0 		mulss	%xmm0, %xmm2
 249 02c4 488B45E8 		movq	-24(%rbp), %rax
 250 02c8 4883C004 		addq	$4, %rax
 251 02cc F30F1008 		movss	(%rax), %xmm1
 252 02d0 0F57C0   		xorps	%xmm0, %xmm0
 253 02d3 F30F59C8 		mulss	%xmm0, %xmm1
 254 02d7 488B45E8 		movq	-24(%rbp), %rax
 255 02db F30F1018 		movss	(%rax), %xmm3
 256 02df 0F57C0   		xorps	%xmm0, %xmm0
 257 02e2 F30F59C3 		mulss	%xmm3, %xmm0
 258 02e6 E8000000 		call	glVertex3f
 258      00
  39:main.cpp      **** 	glVertex3f(0.1f * pzax[0], 0.1f * pzax[1], 0.1f * pzax[2]);
 259              		.loc 1 39 0
 260 02eb 488B45E8 		movq	-24(%rbp), %rax
 261 02ef 4883C008 		addq	$8, %rax
 262 02f3 F30F1008 		movss	(%rax), %xmm1
GAS LISTING /tmp/ccJa8FUH.s 			page 7


 263 02f7 F30F1005 		movss	.LC3(%rip), %xmm0
 263      00000000 
 264 02ff 0F28D1   		movaps	%xmm1, %xmm2
 265 0302 F30F59D0 		mulss	%xmm0, %xmm2
 266 0306 488B45E8 		movq	-24(%rbp), %rax
 267 030a 4883C004 		addq	$4, %rax
 268 030e F30F1008 		movss	(%rax), %xmm1
 269 0312 F30F1005 		movss	.LC3(%rip), %xmm0
 269      00000000 
 270 031a F30F59C8 		mulss	%xmm0, %xmm1
 271 031e 488B45E8 		movq	-24(%rbp), %rax
 272 0322 F30F1018 		movss	(%rax), %xmm3
 273 0326 F30F1005 		movss	.LC3(%rip), %xmm0
 273      00000000 
 274 032e F30F59C3 		mulss	%xmm3, %xmm0
 275 0332 E8000000 		call	glVertex3f
 275      00
  40:main.cpp      **** 	glEnd();
 276              		.loc 1 40 0
 277 0337 E8000000 		call	glEnd
 277      00
  41:main.cpp      **** 
  42:main.cpp      **** 	glBegin(GL_LINES);
 278              		.loc 1 42 0
 279 033c BF010000 		movl	$1, %edi
 279      00
 280 0341 E8000000 		call	glBegin
 280      00
  43:main.cpp      **** 	glColor3ub(0,255,0);
 281              		.loc 1 43 0
 282 0346 BA000000 		movl	$0, %edx
 282      00
 283 034b BEFF0000 		movl	$255, %esi
 283      00
 284 0350 BF000000 		movl	$0, %edi
 284      00
 285 0355 E8000000 		call	glColor3ub
 285      00
  44:main.cpp      **** 	glVertex3f(0.f * pyax[0], 0.f * pyax[1], 0.f * pyax[2]);
 286              		.loc 1 44 0
 287 035a 488B45F0 		movq	-16(%rbp), %rax
 288 035e 4883C008 		addq	$8, %rax
 289 0362 F30F1008 		movss	(%rax), %xmm1
 290 0366 0F57C0   		xorps	%xmm0, %xmm0
 291 0369 0F28D1   		movaps	%xmm1, %xmm2
 292 036c F30F59D0 		mulss	%xmm0, %xmm2
 293 0370 488B45F0 		movq	-16(%rbp), %rax
 294 0374 4883C004 		addq	$4, %rax
 295 0378 F30F1008 		movss	(%rax), %xmm1
 296 037c 0F57C0   		xorps	%xmm0, %xmm0
 297 037f F30F59C8 		mulss	%xmm0, %xmm1
 298 0383 488B45F0 		movq	-16(%rbp), %rax
 299 0387 F30F1018 		movss	(%rax), %xmm3
 300 038b 0F57C0   		xorps	%xmm0, %xmm0
 301 038e F30F59C3 		mulss	%xmm3, %xmm0
 302 0392 E8000000 		call	glVertex3f
 302      00
GAS LISTING /tmp/ccJa8FUH.s 			page 8


  45:main.cpp      **** 	glVertex3f(0.1f * pyax[0], 0.1f * pyax[1], 0.1f * pyax[2]);
 303              		.loc 1 45 0
 304 0397 488B45F0 		movq	-16(%rbp), %rax
 305 039b 4883C008 		addq	$8, %rax
 306 039f F30F1008 		movss	(%rax), %xmm1
 307 03a3 F30F1005 		movss	.LC3(%rip), %xmm0
 307      00000000 
 308 03ab 0F28D1   		movaps	%xmm1, %xmm2
 309 03ae F30F59D0 		mulss	%xmm0, %xmm2
 310 03b2 488B45F0 		movq	-16(%rbp), %rax
 311 03b6 4883C004 		addq	$4, %rax
 312 03ba F30F1008 		movss	(%rax), %xmm1
 313 03be F30F1005 		movss	.LC3(%rip), %xmm0
 313      00000000 
 314 03c6 F30F59C8 		mulss	%xmm0, %xmm1
 315 03ca 488B45F0 		movq	-16(%rbp), %rax
 316 03ce F30F1018 		movss	(%rax), %xmm3
 317 03d2 F30F1005 		movss	.LC3(%rip), %xmm0
 317      00000000 
 318 03da F30F59C3 		mulss	%xmm3, %xmm0
 319 03de E8000000 		call	glVertex3f
 319      00
  46:main.cpp      **** 	glEnd();
 320              		.loc 1 46 0
 321 03e3 E8000000 		call	glEnd
 321      00
  47:main.cpp      **** 
  48:main.cpp      **** 	glBegin(GL_LINES);
 322              		.loc 1 48 0
 323 03e8 BF010000 		movl	$1, %edi
 323      00
 324 03ed E8000000 		call	glBegin
 324      00
  49:main.cpp      **** 	glColor3ub(0,0,255);
 325              		.loc 1 49 0
 326 03f2 BAFF0000 		movl	$255, %edx
 326      00
 327 03f7 BE000000 		movl	$0, %esi
 327      00
 328 03fc BF000000 		movl	$0, %edi
 328      00
 329 0401 E8000000 		call	glColor3ub
 329      00
  50:main.cpp      **** 	glVertex3f(0.0f * pxax[0], 0.0f * pxax[1], 0.0f * pxax[2]);
 330              		.loc 1 50 0
 331 0406 488B45F8 		movq	-8(%rbp), %rax
 332 040a 4883C008 		addq	$8, %rax
 333 040e F30F1008 		movss	(%rax), %xmm1
 334 0412 0F57C0   		xorps	%xmm0, %xmm0
 335 0415 0F28D1   		movaps	%xmm1, %xmm2
 336 0418 F30F59D0 		mulss	%xmm0, %xmm2
 337 041c 488B45F8 		movq	-8(%rbp), %rax
 338 0420 4883C004 		addq	$4, %rax
 339 0424 F30F1008 		movss	(%rax), %xmm1
 340 0428 0F57C0   		xorps	%xmm0, %xmm0
 341 042b F30F59C8 		mulss	%xmm0, %xmm1
 342 042f 488B45F8 		movq	-8(%rbp), %rax
GAS LISTING /tmp/ccJa8FUH.s 			page 9


 343 0433 F30F1018 		movss	(%rax), %xmm3
 344 0437 0F57C0   		xorps	%xmm0, %xmm0
 345 043a F30F59C3 		mulss	%xmm3, %xmm0
 346 043e E8000000 		call	glVertex3f
 346      00
  51:main.cpp      **** 	glVertex3f(0.1f * pxax[0], 0.1f * pxax[1], 0.1f * pxax[2]);
 347              		.loc 1 51 0
 348 0443 488B45F8 		movq	-8(%rbp), %rax
 349 0447 4883C008 		addq	$8, %rax
 350 044b F30F1008 		movss	(%rax), %xmm1
 351 044f F30F1005 		movss	.LC3(%rip), %xmm0
 351      00000000 
 352 0457 0F28D1   		movaps	%xmm1, %xmm2
 353 045a F30F59D0 		mulss	%xmm0, %xmm2
 354 045e 488B45F8 		movq	-8(%rbp), %rax
 355 0462 4883C004 		addq	$4, %rax
 356 0466 F30F1008 		movss	(%rax), %xmm1
 357 046a F30F1005 		movss	.LC3(%rip), %xmm0
 357      00000000 
 358 0472 F30F59C8 		mulss	%xmm0, %xmm1
 359 0476 488B45F8 		movq	-8(%rbp), %rax
 360 047a F30F1018 		movss	(%rax), %xmm3
 361 047e F30F1005 		movss	.LC3(%rip), %xmm0
 361      00000000 
 362 0486 F30F59C3 		mulss	%xmm3, %xmm0
 363 048a E8000000 		call	glVertex3f
 363      00
  52:main.cpp      **** 	glEnd();
 364              		.loc 1 52 0
 365 048f E8000000 		call	glEnd
 365      00
  53:main.cpp      **** 	}
 366              		.loc 1 53 0
 367 0494 C9       		leave
 368              	.LCFI5:
 369              		.cfi_def_cfa 7, 8
 370 0495 C3       		ret
 371              		.cfi_endproc
 372              	.LFE1466:
 374              		.section	.rodata
 375              	.LC7:
 376 0000 496E6974 		.string	"Initializing Graphics Window"
 376      69616C69 
 376      7A696E67 
 376      20477261 
 376      70686963 
 377              	.LC8:
 378 001d 4661696C 		.string	"Failed to start GLFW"
 378      65642074 
 378      6F207374 
 378      61727420 
 378      474C4657 
 379              	.LC9:
 380 0032 506F696E 		.string	"PointViewer"
 380      74566965 
 380      77657200 
 381              	.LC18:
GAS LISTING /tmp/ccJa8FUH.s 			page 10


 382 003e 7465726D 		.string	"terminating GLFW"
 382      696E6174 
 382      696E6720 
 382      474C4657 
 382      00
 383              	.LC19:
 384 004f 70726F67 		.string	"program complete"
 384      72616D20 
 384      636F6D70 
 384      6C657465 
 384      00
 385              		.text
 386              		.globl	main
 388              	main:
 389              	.LFB1467:
  54:main.cpp      **** 
  55:main.cpp      **** int main( int argc, char** argv ){
 390              		.loc 1 55 0
 391              		.cfi_startproc
 392              		.cfi_personality 0x3,__gxx_personality_v0
 393              		.cfi_lsda 0x3,.LLSDA1467
 394 0496 55       		pushq	%rbp
 395              	.LCFI6:
 396              		.cfi_def_cfa_offset 16
 397              		.cfi_offset 6, -16
 398 0497 4889E5   		movq	%rsp, %rbp
 399              	.LCFI7:
 400              		.cfi_def_cfa_register 6
 401 049a 53       		pushq	%rbx
 402 049b 4881EC18 		subq	$280, %rsp
 402      010000
 403 04a2 89BD0CFF 		movl	%edi, -244(%rbp)
 403      FFFF
 404 04a8 4889B500 		movq	%rsi, -256(%rbp)
 404      FFFFFF
 405              	.LBB4:
  56:main.cpp      **** 	int input;
  57:main.cpp      **** 	float sign=1.0f;
 406              		.loc 1 57 0
 407 04af B8000080 		movl	$0x3f800000, %eax
 407      3F
 408 04b4 8945DC   		movl	%eax, -36(%rbp)
  58:main.cpp      **** 	float xaxis[3]={1.f, 0.f, 0.f}, yaxis[3]={0.f, 1.f, 0.f}, zaxis[3]={0.f, 0.f, 1.f};
 409              		.loc 1 58 0
 410 04b7 B8000080 		movl	$0x3f800000, %eax
 410      3F
 411 04bc 8945A0   		movl	%eax, -96(%rbp)
 412 04bf B8000000 		movl	$0x00000000, %eax
 412      00
 413 04c4 8945A4   		movl	%eax, -92(%rbp)
 414 04c7 B8000000 		movl	$0x00000000, %eax
 414      00
 415 04cc 8945A8   		movl	%eax, -88(%rbp)
 416 04cf B8000000 		movl	$0x00000000, %eax
 416      00
 417 04d4 8945B0   		movl	%eax, -80(%rbp)
 418 04d7 B8000080 		movl	$0x3f800000, %eax
GAS LISTING /tmp/ccJa8FUH.s 			page 11


 418      3F
 419 04dc 8945B4   		movl	%eax, -76(%rbp)
 420 04df B8000000 		movl	$0x00000000, %eax
 420      00
 421 04e4 8945B8   		movl	%eax, -72(%rbp)
 422 04e7 B8000000 		movl	$0x00000000, %eax
 422      00
 423 04ec 8945C0   		movl	%eax, -64(%rbp)
 424 04ef B8000000 		movl	$0x00000000, %eax
 424      00
 425 04f4 8945C4   		movl	%eax, -60(%rbp)
 426 04f7 B8000080 		movl	$0x3f800000, %eax
 426      3F
 427 04fc 8945C8   		movl	%eax, -56(%rbp)
  59:main.cpp      **** 	float cos1=cos( 1.f/180 * 3.141592 ), sin1=sin( 1.f/180 * 3.141592);
 428              		.loc 1 59 0
 429 04ff B805F67F 		movl	$0x3f7ff605, %eax
 429      3F
 430 0504 8945E0   		movl	%eax, -32(%rbp)
 431 0507 B858F88E 		movl	$0x3c8ef858, %eax
 431      3C
 432 050c 8945E4   		movl	%eax, -28(%rbp)
  60:main.cpp      ****    	double dims[5];
  61:main.cpp      **** 	bool cdown=false;
 433              		.loc 1 61 0
 434 050f C645EF00 		movb	$0, -17(%rbp)
  62:main.cpp      **** 	GLfloat currentModelMatrix[16];
  63:main.cpp      **** 	std::string userCommand;
 435              		.loc 1 63 0
 436 0513 488D45D0 		leaq	-48(%rbp), %rax
 437 0517 4889C7   		movq	%rax, %rdi
 438              	.LEHB0:
 439              		.cfi_offset 3, -24
 440 051a E8000000 		call	_ZNSsC1Ev
 440      00
 441              	.LEHE0:
  64:main.cpp      **** 	
  65:main.cpp      **** 	dims[4]=1;
 442              		.loc 1 65 0
 443 051f 48B80000 		movabsq	$4607182418800017408, %rax
 443      00000000 
 443      F03F
 444 0529 48898570 		movq	%rax, -144(%rbp)
 444      FFFFFF
  66:main.cpp      **** 	Points P;
 445              		.loc 1 66 0
 446 0530 488D4580 		leaq	-128(%rbp), %rax
 447 0534 4889C7   		movq	%rax, %rdi
 448              	.LEHB1:
 449 0537 E8000000 		call	_ZNSt6vectorI5pointSaIS0_EEC1Ev
 449      00
 450              	.LEHE1:
  67:main.cpp      **** 	
  68:main.cpp      **** 	load_points(&P , dims);
 451              		.loc 1 68 0
 452 053c 488D9550 		leaq	-176(%rbp), %rdx
 452      FFFFFF
GAS LISTING /tmp/ccJa8FUH.s 			page 12


 453 0543 488D4580 		leaq	-128(%rbp), %rax
 454 0547 4889D6   		movq	%rdx, %rsi
 455 054a 4889C7   		movq	%rax, %rdi
 456              	.LEHB2:
 457 054d E8000000 		call	_Z11load_pointsPSt6vectorI5pointSaIS0_EEPd
 457      00
  69:main.cpp      **** 
  70:main.cpp      **** 	input = time( NULL );
 458              		.loc 1 70 0
 459 0552 BF000000 		movl	$0, %edi
 459      00
 460 0557 E8000000 		call	time
 460      00
 461 055c 8945E8   		movl	%eax, -24(%rbp)
  71:main.cpp      **** 	std::cout << "Initializing Graphics Window" << std::endl;	
 462              		.loc 1 71 0
 463 055f BE000000 		movl	$.LC7, %esi
 463      00
 464 0564 BF000000 		movl	$_ZSt4cout, %edi
 464      00
 465 0569 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 465      00
 466 056e BE000000 		movl	$_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, %esi
 466      00
 467 0573 4889C7   		movq	%rax, %rdi
 468 0576 E8000000 		call	_ZNSolsEPFRSoS_E
 468      00
  72:main.cpp      **** 	
  73:main.cpp      **** 
  74:main.cpp      **** 	if ( !glfwInit() ){
 469              		.loc 1 74 0
 470 057b E8000000 		call	glfwInit
 470      00
 471 0580 85C0     		testl	%eax, %eax
 472 0582 0F94C0   		sete	%al
 473 0585 84C0     		testb	%al, %al
 474 0587 7426     		je	.L13
  75:main.cpp      **** 		std::cerr <<  "Failed to start GLFW" << std::endl;
 475              		.loc 1 75 0
 476 0589 BE000000 		movl	$.LC8, %esi
 476      00
 477 058e BF000000 		movl	$_ZSt4cerr, %edi
 477      00
 478 0593 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 478      00
 479 0598 BE000000 		movl	$_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, %esi
 479      00
 480 059d 4889C7   		movq	%rax, %rdi
 481 05a0 E8000000 		call	_ZNSolsEPFRSoS_E
 481      00
  76:main.cpp      **** 	return -1;
 482              		.loc 1 76 0
 483 05a5 BBFFFFFF 		movl	$-1, %ebx
 483      FF
 484 05aa E9D80500 		jmp	.L14
 484      00
 485              	.L13:
GAS LISTING /tmp/ccJa8FUH.s 			page 13


  77:main.cpp      **** 	}
  78:main.cpp      **** 	
  79:main.cpp      **** 	if (!glfwOpenWindow(800, 800, 0, 0, 0, 0, 0, 0, GLFW_WINDOW)){
 486              		.loc 1 79 0
 487 05af C7442410 		movl	$65537, 16(%rsp)
 487      01000100 
 488 05b7 C7442408 		movl	$0, 8(%rsp)
 488      00000000 
 489 05bf C7042400 		movl	$0, (%rsp)
 489      000000
 490 05c6 41B90000 		movl	$0, %r9d
 490      0000
 491 05cc 41B80000 		movl	$0, %r8d
 491      0000
 492 05d2 B9000000 		movl	$0, %ecx
 492      00
 493 05d7 BA000000 		movl	$0, %edx
 493      00
 494 05dc BE200300 		movl	$800, %esi
 494      00
 495 05e1 BF200300 		movl	$800, %edi
 495      00
 496 05e6 E8000000 		call	glfwOpenWindow
 496      00
 497 05eb 85C0     		testl	%eax, %eax
 498 05ed 0F94C0   		sete	%al
 499 05f0 84C0     		testb	%al, %al
 500 05f2 740F     		je	.L15
  80:main.cpp      **** 		glfwTerminate();
 501              		.loc 1 80 0
 502 05f4 E8000000 		call	glfwTerminate
 502      00
  81:main.cpp      **** 	return -1;
 503              		.loc 1 81 0
 504 05f9 BBFFFFFF 		movl	$-1, %ebx
 504      FF
 505 05fe E9840500 		jmp	.L14
 505      00
 506              	.L15:
  82:main.cpp      **** 	}
  83:main.cpp      **** 	
  84:main.cpp      **** 	glfwSetWindowTitle("PointViewer");
 507              		.loc 1 84 0
 508 0603 BF000000 		movl	$.LC9, %edi
 508      00
 509 0608 E8000000 		call	glfwSetWindowTitle
 509      00
  85:main.cpp      **** 
  86:main.cpp      **** 	glfwEnable(GLFW_STICKY_KEYS);
 510              		.loc 1 86 0
 511 060d BF020003 		movl	$196610, %edi
 511      00
 512 0612 E8000000 		call	glfwEnable
 512      00
  87:main.cpp      **** 
  88:main.cpp      **** 	glEnable( GL_POINT_SMOOTH );
 513              		.loc 1 88 0
GAS LISTING /tmp/ccJa8FUH.s 			page 14


 514 0617 BF100B00 		movl	$2832, %edi
 514      00
 515 061c E8000000 		call	glEnable
 515      00
  89:main.cpp      **** //	glEnable( GL_LIGHTING );
  90:main.cpp      **** //	glEnable( GL_LIGHT0 );
  91:main.cpp      **** //	glEnable( GL_LIGHT1 );
  92:main.cpp      **** 
  93:main.cpp      **** 	glPointSize( 1.0f );
 516              		.loc 1 93 0
 517 0621 F30F1005 		movss	.LC4(%rip), %xmm0
 517      00000000 
 518 0629 E8000000 		call	glPointSize
 518      00
  94:main.cpp      **** 	glOrtho(-10,10,-10,10,-10,10);
 519              		.loc 1 94 0
 520 062e F20F102D 		movsd	.LC10(%rip), %xmm5
 520      00000000 
 521 0636 F20F1025 		movsd	.LC11(%rip), %xmm4
 521      00000000 
 522 063e F20F101D 		movsd	.LC10(%rip), %xmm3
 522      00000000 
 523 0646 F20F1015 		movsd	.LC11(%rip), %xmm2
 523      00000000 
 524 064e F20F100D 		movsd	.LC10(%rip), %xmm1
 524      00000000 
 525 0656 F20F1005 		movsd	.LC11(%rip), %xmm0
 525      00000000 
 526 065e E8000000 		call	glOrtho
 526      00
  95:main.cpp      **** 	
  96:main.cpp      **** 	while( glfwGetKey(  GLFW_KEY_ESC ) != GLFW_PRESS && glfwGetWindowParam(GLFW_OPENED) ){
 527              		.loc 1 96 0
 528 0663 E9AC0400 		jmp	.L16
 528      00
 529              	.L35:
  97:main.cpp      **** 		glClearColor( 0.160f, 0.0f, 0.120f, 0.0f);
 530              		.loc 1 97 0
 531 0668 0F57DB   		xorps	%xmm3, %xmm3
 532 066b F30F1015 		movss	.LC12(%rip), %xmm2
 532      00000000 
 533 0673 0F57C9   		xorps	%xmm1, %xmm1
 534 0676 F30F1005 		movss	.LC13(%rip), %xmm0
 534      00000000 
 535 067e E8000000 		call	glClearColor
 535      00
  98:main.cpp      **** 		glClear( GL_COLOR_BUFFER_BIT );
 536              		.loc 1 98 0
 537 0683 BF004000 		movl	$16384, %edi
 537      00
 538 0688 E8000000 		call	glClear
 538      00
  99:main.cpp      **** 		resetPoints(&P, dims);
 539              		.loc 1 99 0
 540 068d 488D9550 		leaq	-176(%rbp), %rdx
 540      FFFFFF
 541 0694 488D4580 		leaq	-128(%rbp), %rax
GAS LISTING /tmp/ccJa8FUH.s 			page 15


 542 0698 4889D6   		movq	%rdx, %rsi
 543 069b 4889C7   		movq	%rax, %rdi
 544 069e E8000000 		call	_Z11resetPointsPSt6vectorI5pointSaIS0_EEPd
 544      00
 100:main.cpp      **** 		drawaxes(xaxis, yaxis, zaxis);
 545              		.loc 1 100 0
 546 06a3 488D55C0 		leaq	-64(%rbp), %rdx
 547 06a7 488D4DB0 		leaq	-80(%rbp), %rcx
 548 06ab 488D45A0 		leaq	-96(%rbp), %rax
 549 06af 4889CE   		movq	%rcx, %rsi
 550 06b2 4889C7   		movq	%rax, %rdi
 551 06b5 E8000000 		call	_Z8drawaxesPfS_S_
 551      00
 101:main.cpp      **** 		glDrawArrays(GL_POINTS, 0, 3);
 552              		.loc 1 101 0
 553 06ba BA030000 		movl	$3, %edx
 553      00
 554 06bf BE000000 		movl	$0, %esi
 554      00
 555 06c4 BF000000 		movl	$0, %edi
 555      00
 556 06c9 E8000000 		call	glDrawArrays
 556      00
 102:main.cpp      **** 		glDrawArrays(GL_LINES,0,3);
 557              		.loc 1 102 0
 558 06ce BA030000 		movl	$3, %edx
 558      00
 559 06d3 BE000000 		movl	$0, %esi
 559      00
 560 06d8 BF010000 		movl	$1, %edi
 560      00
 561 06dd E8000000 		call	glDrawArrays
 561      00
 103:main.cpp      **** 		glfwSwapBuffers();
 562              		.loc 1 103 0
 563 06e2 E8000000 		call	glfwSwapBuffers
 563      00
 104:main.cpp      **** 		glfwPollEvents();
 564              		.loc 1 104 0
 565 06e7 E8000000 		call	glfwPollEvents
 565      00
 105:main.cpp      **** 
 106:main.cpp      **** //manipulate transforms to current view axes
 107:main.cpp      **** /*glGetFloatv(GL_MODELVIEW_MATRIX, currentModelViewMatrix);   
 108:main.cpp      **** glRotatef(xRotation, currentModelViewMatrix[1], currentModelViewMatrix[5], currentModelViewMatrix[9
 109:main.cpp      **** glGetFloatv(GL_MODELVIEW_MATRIX, currentModelViewMatrix);
 110:main.cpp      **** glRotatef(yRotation, currentModelViewMatrix[0], currentModelViewMatrix[4], currentModelViewMatrix[8
 111:main.cpp      **** 
 112:main.cpp      **** 	
 113:main.cpp      **** /* Need to calculate the current axis based on the previous key presses then update each rotate etc
 114:main.cpp      **** 		if(  glfwGetKey( GLFW_KEY_SPACE ) == GLFW_PRESS ){ 
 566              		.loc 1 114 0
 567 06ec BF200000 		movl	$32, %edi
 567      00
 568 06f1 E8000000 		call	glfwGetKey
 568      00
 569 06f6 83F801   		cmpl	$1, %eax
GAS LISTING /tmp/ccJa8FUH.s 			page 16


 570 06f9 0F94C0   		sete	%al
 571 06fc 84C0     		testb	%al, %al
 572 06fe 7468     		je	.L17
 115:main.cpp      **** 			if( glfwGetKey(   GLFW_KEY_RCTRL ) == GLFW_PRESS ){
 573              		.loc 1 115 0
 574 0700 BF220100 		movl	$290, %edi
 574      00
 575 0705 E8000000 		call	glfwGetKey
 575      00
 576 070a 83F801   		cmpl	$1, %eax
 577 070d 0F94C0   		sete	%al
 578 0710 84C0     		testb	%al, %al
 579 0712 742A     		je	.L18
 116:main.cpp      **** 				glRotatef(1.f, zaxis[0], zaxis[1], zaxis[2]);
 580              		.loc 1 116 0
 581 0714 F30F1055 		movss	-56(%rbp), %xmm2
 581      C8
 582 0719 F30F104D 		movss	-60(%rbp), %xmm1
 582      C4
 583 071e F30F1045 		movss	-64(%rbp), %xmm0
 583      C0
 584 0723 0F28DA   		movaps	%xmm2, %xmm3
 585 0726 0F28D1   		movaps	%xmm1, %xmm2
 586 0729 0F28C8   		movaps	%xmm0, %xmm1
 587 072c F30F1005 		movss	.LC4(%rip), %xmm0
 587      00000000 
 588 0734 E8000000 		call	glRotatef
 588      00
 589 0739 E9D60300 		jmp	.L16
 589      00
 590              	.L18:
 117:main.cpp      **** 			}
 118:main.cpp      **** 			else {
 119:main.cpp      **** 				glRotatef(-1.f, zaxis[0], zaxis[1], zaxis[2]);
 591              		.loc 1 119 0
 592 073e F30F1055 		movss	-56(%rbp), %xmm2
 592      C8
 593 0743 F30F104D 		movss	-60(%rbp), %xmm1
 593      C4
 594 0748 F30F1045 		movss	-64(%rbp), %xmm0
 594      C0
 595 074d 0F28DA   		movaps	%xmm2, %xmm3
 596 0750 0F28D1   		movaps	%xmm1, %xmm2
 597 0753 0F28C8   		movaps	%xmm0, %xmm1
 598 0756 F30F1005 		movss	.LC14(%rip), %xmm0
 598      00000000 
 599 075e E8000000 		call	glRotatef
 599      00
 600 0763 E9AC0300 		jmp	.L16
 600      00
 601              	.L17:
 120:main.cpp      **** 			}
 121:main.cpp      **** 		}
 122:main.cpp      **** 		else if(  glfwGetKey( GLFW_KEY_UP ) == GLFW_PRESS ){ 
 602              		.loc 1 122 0
 603 0768 BF1B0100 		movl	$283, %edi
 603      00
GAS LISTING /tmp/ccJa8FUH.s 			page 17


 604 076d E8000000 		call	glfwGetKey
 604      00
 605 0772 83F801   		cmpl	$1, %eax
 606 0775 0F94C0   		sete	%al
 607 0778 84C0     		testb	%al, %al
 608 077a 7456     		je	.L19
 123:main.cpp      **** 			if( glfwGetKey(  GLFW_KEY_RCTRL ) == GLFW_PRESS ) glTranslatef(0.f, 0.1f, 0.f);
 609              		.loc 1 123 0
 610 077c BF220100 		movl	$290, %edi
 610      00
 611 0781 E8000000 		call	glfwGetKey
 611      00
 612 0786 83F801   		cmpl	$1, %eax
 613 0789 0F94C0   		sete	%al
 614 078c 84C0     		testb	%al, %al
 615 078e 7418     		je	.L20
 616              		.loc 1 123 0 is_stmt 0 discriminator 1
 617 0790 0F57D2   		xorps	%xmm2, %xmm2
 618 0793 F30F100D 		movss	.LC3(%rip), %xmm1
 618      00000000 
 619 079b 0F57C0   		xorps	%xmm0, %xmm0
 620 079e E8000000 		call	glTranslatef
 620      00
 621              		.loc 1 123 0
 622 07a3 E96C0300 		jmp	.L16
 622      00
 623              	.L20:
 124:main.cpp      **** 			else {
 125:main.cpp      **** 				glRotatef(-1.f, xaxis[0], xaxis[1], xaxis[2]);
 624              		.loc 1 125 0 is_stmt 1
 625 07a8 F30F1055 		movss	-88(%rbp), %xmm2
 625      A8
 626 07ad F30F104D 		movss	-92(%rbp), %xmm1
 626      A4
 627 07b2 F30F1045 		movss	-96(%rbp), %xmm0
 627      A0
 628 07b7 0F28DA   		movaps	%xmm2, %xmm3
 629 07ba 0F28D1   		movaps	%xmm1, %xmm2
 630 07bd 0F28C8   		movaps	%xmm0, %xmm1
 631 07c0 F30F1005 		movss	.LC14(%rip), %xmm0
 631      00000000 
 632 07c8 E8000000 		call	glRotatef
 632      00
 633 07cd E9420300 		jmp	.L16
 633      00
 634              	.L19:
 126:main.cpp      **** 			}
 127:main.cpp      **** 		}
 128:main.cpp      **** 		else if(  glfwGetKey( GLFW_KEY_DOWN ) == GLFW_PRESS ){ 
 635              		.loc 1 128 0
 636 07d2 BF1C0100 		movl	$284, %edi
 636      00
 637 07d7 E8000000 		call	glfwGetKey
 637      00
 638 07dc 83F801   		cmpl	$1, %eax
 639 07df 0F94C0   		sete	%al
 640 07e2 84C0     		testb	%al, %al
GAS LISTING /tmp/ccJa8FUH.s 			page 18


 641 07e4 7456     		je	.L21
 129:main.cpp      **** 			if( glfwGetKey(   GLFW_KEY_RCTRL ) == GLFW_PRESS ) glTranslatef(0.f, -0.1f, 0.f);
 642              		.loc 1 129 0
 643 07e6 BF220100 		movl	$290, %edi
 643      00
 644 07eb E8000000 		call	glfwGetKey
 644      00
 645 07f0 83F801   		cmpl	$1, %eax
 646 07f3 0F94C0   		sete	%al
 647 07f6 84C0     		testb	%al, %al
 648 07f8 7418     		je	.L22
 649              		.loc 1 129 0 is_stmt 0 discriminator 1
 650 07fa 0F57D2   		xorps	%xmm2, %xmm2
 651 07fd F30F100D 		movss	.LC15(%rip), %xmm1
 651      00000000 
 652 0805 0F57C0   		xorps	%xmm0, %xmm0
 653 0808 E8000000 		call	glTranslatef
 653      00
 654              		.loc 1 129 0
 655 080d E9020300 		jmp	.L16
 655      00
 656              	.L22:
 130:main.cpp      **** 			else {
 131:main.cpp      **** 				glRotatef(1.f, xaxis[0], xaxis[1], xaxis[2]);
 657              		.loc 1 131 0 is_stmt 1
 658 0812 F30F1055 		movss	-88(%rbp), %xmm2
 658      A8
 659 0817 F30F104D 		movss	-92(%rbp), %xmm1
 659      A4
 660 081c F30F1045 		movss	-96(%rbp), %xmm0
 660      A0
 661 0821 0F28DA   		movaps	%xmm2, %xmm3
 662 0824 0F28D1   		movaps	%xmm1, %xmm2
 663 0827 0F28C8   		movaps	%xmm0, %xmm1
 664 082a F30F1005 		movss	.LC4(%rip), %xmm0
 664      00000000 
 665 0832 E8000000 		call	glRotatef
 665      00
 666 0837 E9D80200 		jmp	.L16
 666      00
 667              	.L21:
 132:main.cpp      **** 			}
 133:main.cpp      **** 		}
 134:main.cpp      **** 		else if(  glfwGetKey( GLFW_KEY_LEFT ) == GLFW_PRESS ){ 
 668              		.loc 1 134 0
 669 083c BF1D0100 		movl	$285, %edi
 669      00
 670 0841 E8000000 		call	glfwGetKey
 670      00
 671 0846 83F801   		cmpl	$1, %eax
 672 0849 0F94C0   		sete	%al
 673 084c 84C0     		testb	%al, %al
 674 084e 7456     		je	.L23
 135:main.cpp      **** 			if( glfwGetKey(   GLFW_KEY_RCTRL ) == GLFW_PRESS ) glTranslatef(0.1f, 0.f, 0.f);
 675              		.loc 1 135 0
 676 0850 BF220100 		movl	$290, %edi
 676      00
GAS LISTING /tmp/ccJa8FUH.s 			page 19


 677 0855 E8000000 		call	glfwGetKey
 677      00
 678 085a 83F801   		cmpl	$1, %eax
 679 085d 0F94C0   		sete	%al
 680 0860 84C0     		testb	%al, %al
 681 0862 7418     		je	.L24
 682              		.loc 1 135 0 is_stmt 0 discriminator 1
 683 0864 0F57D2   		xorps	%xmm2, %xmm2
 684 0867 0F57C9   		xorps	%xmm1, %xmm1
 685 086a F30F1005 		movss	.LC3(%rip), %xmm0
 685      00000000 
 686 0872 E8000000 		call	glTranslatef
 686      00
 687              		.loc 1 135 0
 688 0877 E9980200 		jmp	.L16
 688      00
 689              	.L24:
 136:main.cpp      **** 			else {
 137:main.cpp      **** 				glRotatef(-1.f, yaxis[0], yaxis[1], yaxis[2]);
 690              		.loc 1 137 0 is_stmt 1
 691 087c F30F1055 		movss	-72(%rbp), %xmm2
 691      B8
 692 0881 F30F104D 		movss	-76(%rbp), %xmm1
 692      B4
 693 0886 F30F1045 		movss	-80(%rbp), %xmm0
 693      B0
 694 088b 0F28DA   		movaps	%xmm2, %xmm3
 695 088e 0F28D1   		movaps	%xmm1, %xmm2
 696 0891 0F28C8   		movaps	%xmm0, %xmm1
 697 0894 F30F1005 		movss	.LC14(%rip), %xmm0
 697      00000000 
 698 089c E8000000 		call	glRotatef
 698      00
 699 08a1 E96E0200 		jmp	.L16
 699      00
 700              	.L23:
 138:main.cpp      **** 			}
 139:main.cpp      **** 		}
 140:main.cpp      **** 		else if(  glfwGetKey( GLFW_KEY_RIGHT ) == GLFW_PRESS ){ 
 701              		.loc 1 140 0
 702 08a6 BF1E0100 		movl	$286, %edi
 702      00
 703 08ab E8000000 		call	glfwGetKey
 703      00
 704 08b0 83F801   		cmpl	$1, %eax
 705 08b3 0F94C0   		sete	%al
 706 08b6 84C0     		testb	%al, %al
 707 08b8 7456     		je	.L25
 141:main.cpp      **** 			if( glfwGetKey(   GLFW_KEY_RCTRL ) == GLFW_PRESS ) glTranslatef(-0.1f, 0.f, 0.f);
 708              		.loc 1 141 0
 709 08ba BF220100 		movl	$290, %edi
 709      00
 710 08bf E8000000 		call	glfwGetKey
 710      00
 711 08c4 83F801   		cmpl	$1, %eax
 712 08c7 0F94C0   		sete	%al
 713 08ca 84C0     		testb	%al, %al
GAS LISTING /tmp/ccJa8FUH.s 			page 20


 714 08cc 7418     		je	.L26
 715              		.loc 1 141 0 is_stmt 0 discriminator 1
 716 08ce 0F57D2   		xorps	%xmm2, %xmm2
 717 08d1 0F57C9   		xorps	%xmm1, %xmm1
 718 08d4 F30F1005 		movss	.LC15(%rip), %xmm0
 718      00000000 
 719 08dc E8000000 		call	glTranslatef
 719      00
 720              		.loc 1 141 0
 721 08e1 E92E0200 		jmp	.L16
 721      00
 722              	.L26:
 142:main.cpp      **** 			else {
 143:main.cpp      **** 				glRotatef(1.f, yaxis[0], yaxis[1], yaxis[2]);
 723              		.loc 1 143 0 is_stmt 1
 724 08e6 F30F1055 		movss	-72(%rbp), %xmm2
 724      B8
 725 08eb F30F104D 		movss	-76(%rbp), %xmm1
 725      B4
 726 08f0 F30F1045 		movss	-80(%rbp), %xmm0
 726      B0
 727 08f5 0F28DA   		movaps	%xmm2, %xmm3
 728 08f8 0F28D1   		movaps	%xmm1, %xmm2
 729 08fb 0F28C8   		movaps	%xmm0, %xmm1
 730 08fe F30F1005 		movss	.LC4(%rip), %xmm0
 730      00000000 
 731 0906 E8000000 		call	glRotatef
 731      00
 732 090b E9040200 		jmp	.L16
 732      00
 733              	.L25:
 144:main.cpp      **** 			}
 145:main.cpp      **** 		}
 146:main.cpp      **** 		else if(  glfwGetMouseButton(   GLFW_MOUSE_BUTTON_1 ) == 1 ){ 
 734              		.loc 1 146 0
 735 0910 BF000000 		movl	$0, %edi
 735      00
 736 0915 E8000000 		call	glfwGetMouseButton
 736      00
 737 091a 83F801   		cmpl	$1, %eax
 738 091d 0F94C0   		sete	%al
 739 0920 84C0     		testb	%al, %al
 740 0922 7422     		je	.L27
 147:main.cpp      **** 			glScalef( pow(1.1f,1) , pow(1.1f,1) , pow(1.1f,1) );
 741              		.loc 1 147 0
 742 0924 F30F1015 		movss	.LC16(%rip), %xmm2
 742      00000000 
 743 092c F30F100D 		movss	.LC16(%rip), %xmm1
 743      00000000 
 744 0934 F30F1005 		movss	.LC16(%rip), %xmm0
 744      00000000 
 745 093c E8000000 		call	glScalef
 745      00
 746 0941 E9CE0100 		jmp	.L16
 746      00
 747              	.L27:
 148:main.cpp      **** 	
GAS LISTING /tmp/ccJa8FUH.s 			page 21


 149:main.cpp      **** 		}
 150:main.cpp      **** 		else if(  glfwGetMouseButton(   GLFW_MOUSE_BUTTON_2 ) == 1 ){ 
 748              		.loc 1 150 0
 749 0946 BF010000 		movl	$1, %edi
 749      00
 750 094b E8000000 		call	glfwGetMouseButton
 750      00
 751 0950 83F801   		cmpl	$1, %eax
 752 0953 0F94C0   		sete	%al
 753 0956 84C0     		testb	%al, %al
 754 0958 7422     		je	.L28
 151:main.cpp      **** 			glScalef( pow(1.1f,-1) , pow(1.1f,-1) , pow(1.1f,-1) );
 755              		.loc 1 151 0
 756 095a F30F1015 		movss	.LC17(%rip), %xmm2
 756      00000000 
 757 0962 F30F100D 		movss	.LC17(%rip), %xmm1
 757      00000000 
 758 096a F30F1005 		movss	.LC17(%rip), %xmm0
 758      00000000 
 759 0972 E8000000 		call	glScalef
 759      00
 760 0977 E9980100 		jmp	.L16
 760      00
 761              	.L28:
 152:main.cpp      **** 		}
 153:main.cpp      **** 	
 154:main.cpp      **** 		else if( glfwGetKey( 'R' ) == GLFW_PRESS ){
 762              		.loc 1 154 0
 763 097c BF520000 		movl	$82, %edi
 763      00
 764 0981 E8000000 		call	glfwGetKey
 764      00
 765 0986 83F801   		cmpl	$1, %eax
 766 0989 0F94C0   		sete	%al
 767 098c 84C0     		testb	%al, %al
 768 098e 746F     		je	.L29
 155:main.cpp      **** 			glLoadIdentity();//reset view
 769              		.loc 1 155 0
 770 0990 E8000000 		call	glLoadIdentity
 770      00
 156:main.cpp      **** 
 157:main.cpp      **** 			glGetFloatv(GL_MODELVIEW_MATRIX, currentModelMatrix);//reset vectors
 771              		.loc 1 157 0
 772 0995 488D8510 		leaq	-240(%rbp), %rax
 772      FFFFFF
 773 099c 4889C6   		movq	%rax, %rsi
 774 099f BFA60B00 		movl	$2982, %edi
 774      00
 775 09a4 E8000000 		call	glGetFloatv
 775      00
 158:main.cpp      **** 			xaxis[0]=currentModelMatrix[0];
 776              		.loc 1 158 0
 777 09a9 8B8510FF 		movl	-240(%rbp), %eax
 777      FFFF
 778 09af 8945A0   		movl	%eax, -96(%rbp)
 159:main.cpp      **** 			xaxis[1]=currentModelMatrix[4];
 779              		.loc 1 159 0
GAS LISTING /tmp/ccJa8FUH.s 			page 22


 780 09b2 8B8520FF 		movl	-224(%rbp), %eax
 780      FFFF
 781 09b8 8945A4   		movl	%eax, -92(%rbp)
 160:main.cpp      **** 			xaxis[2]=currentModelMatrix[8];
 782              		.loc 1 160 0
 783 09bb 8B8530FF 		movl	-208(%rbp), %eax
 783      FFFF
 784 09c1 8945A8   		movl	%eax, -88(%rbp)
 161:main.cpp      **** 			yaxis[0]=currentModelMatrix[1];
 785              		.loc 1 161 0
 786 09c4 8B8514FF 		movl	-236(%rbp), %eax
 786      FFFF
 787 09ca 8945B0   		movl	%eax, -80(%rbp)
 162:main.cpp      **** 			yaxis[1]=currentModelMatrix[5];
 788              		.loc 1 162 0
 789 09cd 8B8524FF 		movl	-220(%rbp), %eax
 789      FFFF
 790 09d3 8945B4   		movl	%eax, -76(%rbp)
 163:main.cpp      **** 			yaxis[2]=currentModelMatrix[9];
 791              		.loc 1 163 0
 792 09d6 8B8534FF 		movl	-204(%rbp), %eax
 792      FFFF
 793 09dc 8945B8   		movl	%eax, -72(%rbp)
 164:main.cpp      **** 			zaxis[0]=currentModelMatrix[2];
 794              		.loc 1 164 0
 795 09df 8B8518FF 		movl	-232(%rbp), %eax
 795      FFFF
 796 09e5 8945C0   		movl	%eax, -64(%rbp)
 165:main.cpp      **** 			zaxis[1]=currentModelMatrix[6];
 797              		.loc 1 165 0
 798 09e8 8B8528FF 		movl	-216(%rbp), %eax
 798      FFFF
 799 09ee 8945C4   		movl	%eax, -60(%rbp)
 166:main.cpp      **** 			zaxis[2]=currentModelMatrix[10];
 800              		.loc 1 166 0
 801 09f1 8B8538FF 		movl	-200(%rbp), %eax
 801      FFFF
 802 09f7 8945C8   		movl	%eax, -56(%rbp)
 803 09fa E9150100 		jmp	.L16
 803      00
 804              	.L29:
 167:main.cpp      **** 	}
 168:main.cpp      **** 
 169:main.cpp      **** 		else if( glfwGetKey( 'G' ) == GLFW_PRESS ){
 805              		.loc 1 169 0
 806 09ff BF470000 		movl	$71, %edi
 806      00
 807 0a04 E8000000 		call	glfwGetKey
 807      00
 808 0a09 83F801   		cmpl	$1, %eax
 809 0a0c 0F94C0   		sete	%al
 810 0a0f 84C0     		testb	%al, %al
 811 0a11 746A     		je	.L30
 170:main.cpp      **** 			glGetFloatv(GL_MODELVIEW_MATRIX, currentModelMatrix);//reset vectors
 812              		.loc 1 170 0
 813 0a13 488D8510 		leaq	-240(%rbp), %rax
 813      FFFFFF
GAS LISTING /tmp/ccJa8FUH.s 			page 23


 814 0a1a 4889C6   		movq	%rax, %rsi
 815 0a1d BFA60B00 		movl	$2982, %edi
 815      00
 816 0a22 E8000000 		call	glGetFloatv
 816      00
 171:main.cpp      **** 			xaxis[0]=currentModelMatrix[0];
 817              		.loc 1 171 0
 818 0a27 8B8510FF 		movl	-240(%rbp), %eax
 818      FFFF
 819 0a2d 8945A0   		movl	%eax, -96(%rbp)
 172:main.cpp      **** 			xaxis[1]=currentModelMatrix[4];
 820              		.loc 1 172 0
 821 0a30 8B8520FF 		movl	-224(%rbp), %eax
 821      FFFF
 822 0a36 8945A4   		movl	%eax, -92(%rbp)
 173:main.cpp      **** 			xaxis[2]=currentModelMatrix[8];
 823              		.loc 1 173 0
 824 0a39 8B8530FF 		movl	-208(%rbp), %eax
 824      FFFF
 825 0a3f 8945A8   		movl	%eax, -88(%rbp)
 174:main.cpp      **** 			yaxis[0]=currentModelMatrix[1];
 826              		.loc 1 174 0
 827 0a42 8B8514FF 		movl	-236(%rbp), %eax
 827      FFFF
 828 0a48 8945B0   		movl	%eax, -80(%rbp)
 175:main.cpp      **** 			yaxis[1]=currentModelMatrix[5];
 829              		.loc 1 175 0
 830 0a4b 8B8524FF 		movl	-220(%rbp), %eax
 830      FFFF
 831 0a51 8945B4   		movl	%eax, -76(%rbp)
 176:main.cpp      **** 			yaxis[2]=currentModelMatrix[9];
 832              		.loc 1 176 0
 833 0a54 8B8534FF 		movl	-204(%rbp), %eax
 833      FFFF
 834 0a5a 8945B8   		movl	%eax, -72(%rbp)
 177:main.cpp      **** 			zaxis[0]=currentModelMatrix[2];
 835              		.loc 1 177 0
 836 0a5d 8B8518FF 		movl	-232(%rbp), %eax
 836      FFFF
 837 0a63 8945C0   		movl	%eax, -64(%rbp)
 178:main.cpp      **** 			zaxis[1]=currentModelMatrix[6];
 838              		.loc 1 178 0
 839 0a66 8B8528FF 		movl	-216(%rbp), %eax
 839      FFFF
 840 0a6c 8945C4   		movl	%eax, -60(%rbp)
 179:main.cpp      **** 			zaxis[2]=currentModelMatrix[10];
 841              		.loc 1 179 0
 842 0a6f 8B8538FF 		movl	-200(%rbp), %eax
 842      FFFF
 843 0a75 8945C8   		movl	%eax, -56(%rbp)
 844 0a78 E9970000 		jmp	.L16
 844      00
 845              	.L30:
 180:main.cpp      **** 		}
 181:main.cpp      **** 
 182:main.cpp      **** 		else if( glfwGetKey( 'C' ) == GLFW_PRESS & !cdown ){
 846              		.loc 1 182 0
GAS LISTING /tmp/ccJa8FUH.s 			page 24


 847 0a7d BF430000 		movl	$67, %edi
 847      00
 848 0a82 E8000000 		call	glfwGetKey
 848      00
 849 0a87 83F801   		cmpl	$1, %eax
 850 0a8a 0F94C0   		sete	%al
 851 0a8d 0FB6D0   		movzbl	%al, %edx
 852 0a90 0FB645EF 		movzbl	-17(%rbp), %eax
 853 0a94 83F001   		xorl	$1, %eax
 854 0a97 0FB6C0   		movzbl	%al, %eax
 855 0a9a 21D0     		andl	%edx, %eax
 856 0a9c 85C0     		testl	%eax, %eax
 857 0a9e 0F95C0   		setne	%al
 858 0aa1 84C0     		testb	%al, %al
 859 0aa3 744A     		je	.L31
 183:main.cpp      **** 			dims[4] = float(int( dims[4] + 1 ) % 3);
 860              		.loc 1 183 0
 861 0aa5 F20F108D 		movsd	-144(%rbp), %xmm1
 861      70FFFFFF 
 862 0aad F20F1005 		movsd	.LC0(%rip), %xmm0
 862      00000000 
 863 0ab5 F20F58C1 		addsd	%xmm1, %xmm0
 864 0ab9 F20F2CC8 		cvttsd2si	%xmm0, %ecx
 865 0abd BA565555 		movl	$1431655766, %edx
 865      55
 866 0ac2 89C8     		movl	%ecx, %eax
 867 0ac4 F7EA     		imull	%edx
 868 0ac6 89C8     		movl	%ecx, %eax
 869 0ac8 C1F81F   		sarl	$31, %eax
 870 0acb 29C2     		subl	%eax, %edx
 871 0acd 89D0     		movl	%edx, %eax
 872 0acf 01C0     		addl	%eax, %eax
 873 0ad1 01D0     		addl	%edx, %eax
 874 0ad3 89CA     		movl	%ecx, %edx
 875 0ad5 29C2     		subl	%eax, %edx
 876 0ad7 F30F2AC2 		cvtsi2ss	%edx, %xmm0
 877 0adb 0F14C0   		unpcklps	%xmm0, %xmm0
 878 0ade 0F5AC0   		cvtps2pd	%xmm0, %xmm0
 879 0ae1 F20F1185 		movsd	%xmm0, -144(%rbp)
 879      70FFFFFF 
 184:main.cpp      **** 			cdown=true;
 880              		.loc 1 184 0
 881 0ae9 C645EF01 		movb	$1, -17(%rbp)
 882 0aed EB25     		jmp	.L16
 883              	.L31:
 185:main.cpp      **** 		}		
 186:main.cpp      **** 		else if( glfwGetKey( 'C' ) == GLFW_RELEASE ){
 884              		.loc 1 186 0
 885 0aef BF430000 		movl	$67, %edi
 885      00
 886 0af4 E8000000 		call	glfwGetKey
 886      00
 887 0af9 85C0     		testl	%eax, %eax
 888 0afb 0F94C0   		sete	%al
 889 0afe 84C0     		testb	%al, %al
 890 0b00 7406     		je	.L32
 187:main.cpp      **** 			cdown=false;
GAS LISTING /tmp/ccJa8FUH.s 			page 25


 891              		.loc 1 187 0
 892 0b02 C645EF00 		movb	$0, -17(%rbp)
 893 0b06 EB0C     		jmp	.L16
 894              	.L32:
 188:main.cpp      **** 		}	
 189:main.cpp      **** 		else if( glfwGetKey( '/' ) == GLFW_RELEASE ){
 895              		.loc 1 189 0
 896 0b08 BF2F0000 		movl	$47, %edi
 896      00
 897 0b0d E8000000 		call	glfwGetKey
 897      00
 898 0b12 85C0     		testl	%eax, %eax
 899              	.L16:
  96:main.cpp      **** 	while( glfwGetKey(  GLFW_KEY_ESC ) != GLFW_PRESS && glfwGetWindowParam(GLFW_OPENED) ){
 900              		.loc 1 96 0 discriminator 1
 901 0b14 BF010100 		movl	$257, %edi
 901      00
 902 0b19 E8000000 		call	glfwGetKey
 902      00
 903 0b1e 83F801   		cmpl	$1, %eax
 904 0b21 7415     		je	.L33
  96:main.cpp      **** 	while( glfwGetKey(  GLFW_KEY_ESC ) != GLFW_PRESS && glfwGetWindowParam(GLFW_OPENED) ){
 905              		.loc 1 96 0 is_stmt 0 discriminator 2
 906 0b23 BF010002 		movl	$131073, %edi
 906      00
 907 0b28 E8000000 		call	glfwGetWindowParam
 907      00
 908 0b2d 85C0     		testl	%eax, %eax
 909 0b2f 7407     		je	.L33
  96:main.cpp      **** 	while( glfwGetKey(  GLFW_KEY_ESC ) != GLFW_PRESS && glfwGetWindowParam(GLFW_OPENED) ){
 910              		.loc 1 96 0 discriminator 4
 911 0b31 B8010000 		movl	$1, %eax
 911      00
 912 0b36 EB05     		jmp	.L34
 913              	.L33:
  96:main.cpp      **** 	while( glfwGetKey(  GLFW_KEY_ESC ) != GLFW_PRESS && glfwGetWindowParam(GLFW_OPENED) ){
 914              		.loc 1 96 0 discriminator 3
 915 0b38 B8000000 		movl	$0, %eax
 915      00
 916              	.L34:
  96:main.cpp      **** 	while( glfwGetKey(  GLFW_KEY_ESC ) != GLFW_PRESS && glfwGetWindowParam(GLFW_OPENED) ){
 917              		.loc 1 96 0 discriminator 5
 918 0b3d 84C0     		testb	%al, %al
 919 0b3f 0F8523FB 		jne	.L35
 919      FFFF
 190:main.cpp      **** 		//bring up user terminal
 191:main.cpp      **** 		}
 192:main.cpp      **** 	}
 193:main.cpp      **** 	
 194:main.cpp      **** 	std::cout << "terminating GLFW" << std::endl;
 920              		.loc 1 194 0 is_stmt 1
 921 0b45 BE000000 		movl	$.LC18, %esi
 921      00
 922 0b4a BF000000 		movl	$_ZSt4cout, %edi
 922      00
 923 0b4f E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 923      00
GAS LISTING /tmp/ccJa8FUH.s 			page 26


 924 0b54 BE000000 		movl	$_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, %esi
 924      00
 925 0b59 4889C7   		movq	%rax, %rdi
 926 0b5c E8000000 		call	_ZNSolsEPFRSoS_E
 926      00
 195:main.cpp      **** 	glfwTerminate();
 927              		.loc 1 195 0
 928 0b61 E8000000 		call	glfwTerminate
 928      00
 196:main.cpp      **** 	std::cout << "program complete" << std::endl;
 929              		.loc 1 196 0
 930 0b66 BE000000 		movl	$.LC19, %esi
 930      00
 931 0b6b BF000000 		movl	$_ZSt4cout, %edi
 931      00
 932 0b70 E8000000 		call	_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
 932      00
 933 0b75 BE000000 		movl	$_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_, %esi
 933      00
 934 0b7a 4889C7   		movq	%rax, %rdi
 935 0b7d E8000000 		call	_ZNSolsEPFRSoS_E
 935      00
 936              	.LEHE2:
 197:main.cpp      **** return 0;
 937              		.loc 1 197 0
 938 0b82 BB000000 		movl	$0, %ebx
 938      00
 939              	.L14:
 940 0b87 488D4580 		leaq	-128(%rbp), %rax
 941 0b8b 4889C7   		movq	%rax, %rdi
 942              	.LEHB3:
 943 0b8e E8000000 		call	_ZNSt6vectorI5pointSaIS0_EED1Ev
 943      00
 944              	.LEHE3:
 945 0b93 488D45D0 		leaq	-48(%rbp), %rax
 946 0b97 4889C7   		movq	%rax, %rdi
 947              	.LEHB4:
 948 0b9a E8000000 		call	_ZNSsD1Ev
 948      00
 949              	.LEHE4:
 950 0b9f 89D8     		movl	%ebx, %eax
 951              	.LBE4:
 198:main.cpp      **** }
 952              		.loc 1 198 0
 953 0ba1 4881C418 		addq	$280, %rsp
 953      010000
 954 0ba8 5B       		popq	%rbx
 955 0ba9 5D       		popq	%rbp
 956              		.cfi_remember_state
 957              	.LCFI8:
 958              		.cfi_def_cfa 7, 8
 959 0baa C3       		ret
 960              	.L39:
 961              	.LCFI9:
 962              		.cfi_restore_state
 963 0bab 4889C3   		movq	%rax, %rbx
 964              	.LBB5:
GAS LISTING /tmp/ccJa8FUH.s 			page 27


 197:main.cpp      **** return 0;
 965              		.loc 1 197 0
 966 0bae 488D4580 		leaq	-128(%rbp), %rax
 967 0bb2 4889C7   		movq	%rax, %rdi
 968 0bb5 E8000000 		call	_ZNSt6vectorI5pointSaIS0_EED1Ev
 968      00
 969 0bba EB03     		jmp	.L37
 970              	.L38:
 971 0bbc 4889C3   		movq	%rax, %rbx
 972              	.L37:
 973 0bbf 488D45D0 		leaq	-48(%rbp), %rax
 974 0bc3 4889C7   		movq	%rax, %rdi
 975 0bc6 E8000000 		call	_ZNSsD1Ev
 975      00
 976 0bcb 4889D8   		movq	%rbx, %rax
 977 0bce 4889C7   		movq	%rax, %rdi
 978              	.LEHB5:
 979 0bd1 E8000000 		call	_Unwind_Resume
 979      00
 980              	.LEHE5:
 981              	.LBE5:
 982              		.cfi_endproc
 983              	.LFE1467:
 984              		.globl	__gxx_personality_v0
 985              		.section	.gcc_except_table,"a",@progbits
 986              	.LLSDA1467:
 987 0000 FF       		.byte	0xff
 988 0001 FF       		.byte	0xff
 989 0002 01       		.byte	0x1
 990 0003 22       		.uleb128 .LLSDACSE1467-.LLSDACSB1467
 991              	.LLSDACSB1467:
 992 0004 8401     		.uleb128 .LEHB0-.LFB1467
 993 0006 05       		.uleb128 .LEHE0-.LEHB0
 994 0007 00       		.uleb128 0
 995 0008 00       		.uleb128 0
 996 0009 A101     		.uleb128 .LEHB1-.LFB1467
 997 000b 05       		.uleb128 .LEHE1-.LEHB1
 998 000c A60E     		.uleb128 .L38-.LFB1467
 999 000e 00       		.uleb128 0
 1000 000f B701     		.uleb128 .LEHB2-.LFB1467
 1001 0011 B50C     		.uleb128 .LEHE2-.LEHB2
 1002 0013 950E     		.uleb128 .L39-.LFB1467
 1003 0015 00       		.uleb128 0
 1004 0016 F80D     		.uleb128 .LEHB3-.LFB1467
 1005 0018 05       		.uleb128 .LEHE3-.LEHB3
 1006 0019 A60E     		.uleb128 .L38-.LFB1467
 1007 001b 00       		.uleb128 0
 1008 001c 840E     		.uleb128 .LEHB4-.LFB1467
 1009 001e 05       		.uleb128 .LEHE4-.LEHB4
 1010 001f 00       		.uleb128 0
 1011 0020 00       		.uleb128 0
 1012 0021 BB0E     		.uleb128 .LEHB5-.LFB1467
 1013 0023 05       		.uleb128 .LEHE5-.LEHB5
 1014 0024 00       		.uleb128 0
 1015 0025 00       		.uleb128 0
 1016              	.LLSDACSE1467:
 1017              		.text
GAS LISTING /tmp/ccJa8FUH.s 			page 28


 1019              		.section	.text._ZNKSt6vectorI5pointSaIS0_EE4sizeEv,"axG",@progbits,_ZNKSt6vectorI5pointSaIS0_EE4si
 1020              		.align 2
 1021              		.weak	_ZNKSt6vectorI5pointSaIS0_EE4sizeEv
 1023              	_ZNKSt6vectorI5pointSaIS0_EE4sizeEv:
 1024              	.LFB1469:
 1025              		.file 2 "/usr/include/c++/4.6/bits/stl_vector.h"
   1:/usr/include/c++/4.6/bits/stl_vector.h **** // Vector implementation -*- C++ -*-
   2:/usr/include/c++/4.6/bits/stl_vector.h **** 
   3:/usr/include/c++/4.6/bits/stl_vector.h **** // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
   4:/usr/include/c++/4.6/bits/stl_vector.h **** // 2011 Free Software Foundation, Inc.
   5:/usr/include/c++/4.6/bits/stl_vector.h **** //
   6:/usr/include/c++/4.6/bits/stl_vector.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   7:/usr/include/c++/4.6/bits/stl_vector.h **** // software; you can redistribute it and/or modify it under the
   8:/usr/include/c++/4.6/bits/stl_vector.h **** // terms of the GNU General Public License as published by the
   9:/usr/include/c++/4.6/bits/stl_vector.h **** // Free Software Foundation; either version 3, or (at your option)
  10:/usr/include/c++/4.6/bits/stl_vector.h **** // any later version.
  11:/usr/include/c++/4.6/bits/stl_vector.h **** 
  12:/usr/include/c++/4.6/bits/stl_vector.h **** // This library is distributed in the hope that it will be useful,
  13:/usr/include/c++/4.6/bits/stl_vector.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/usr/include/c++/4.6/bits/stl_vector.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/usr/include/c++/4.6/bits/stl_vector.h **** // GNU General Public License for more details.
  16:/usr/include/c++/4.6/bits/stl_vector.h **** 
  17:/usr/include/c++/4.6/bits/stl_vector.h **** // Under Section 7 of GPL version 3, you are granted additional
  18:/usr/include/c++/4.6/bits/stl_vector.h **** // permissions described in the GCC Runtime Library Exception, version
  19:/usr/include/c++/4.6/bits/stl_vector.h **** // 3.1, as published by the Free Software Foundation.
  20:/usr/include/c++/4.6/bits/stl_vector.h **** 
  21:/usr/include/c++/4.6/bits/stl_vector.h **** // You should have received a copy of the GNU General Public License and
  22:/usr/include/c++/4.6/bits/stl_vector.h **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/usr/include/c++/4.6/bits/stl_vector.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/usr/include/c++/4.6/bits/stl_vector.h **** // <http://www.gnu.org/licenses/>.
  25:/usr/include/c++/4.6/bits/stl_vector.h **** 
  26:/usr/include/c++/4.6/bits/stl_vector.h **** /*
  27:/usr/include/c++/4.6/bits/stl_vector.h ****  *
  28:/usr/include/c++/4.6/bits/stl_vector.h ****  * Copyright (c) 1994
  29:/usr/include/c++/4.6/bits/stl_vector.h ****  * Hewlett-Packard Company
  30:/usr/include/c++/4.6/bits/stl_vector.h ****  *
  31:/usr/include/c++/4.6/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  32:/usr/include/c++/4.6/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  33:/usr/include/c++/4.6/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  34:/usr/include/c++/4.6/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  35:/usr/include/c++/4.6/bits/stl_vector.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  36:/usr/include/c++/4.6/bits/stl_vector.h ****  * representations about the suitability of this software for any
  37:/usr/include/c++/4.6/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  38:/usr/include/c++/4.6/bits/stl_vector.h ****  *
  39:/usr/include/c++/4.6/bits/stl_vector.h ****  *
  40:/usr/include/c++/4.6/bits/stl_vector.h ****  * Copyright (c) 1996
  41:/usr/include/c++/4.6/bits/stl_vector.h ****  * Silicon Graphics Computer Systems, Inc.
  42:/usr/include/c++/4.6/bits/stl_vector.h ****  *
  43:/usr/include/c++/4.6/bits/stl_vector.h ****  * Permission to use, copy, modify, distribute and sell this software
  44:/usr/include/c++/4.6/bits/stl_vector.h ****  * and its documentation for any purpose is hereby granted without fee,
  45:/usr/include/c++/4.6/bits/stl_vector.h ****  * provided that the above copyright notice appear in all copies and
  46:/usr/include/c++/4.6/bits/stl_vector.h ****  * that both that copyright notice and this permission notice appear
  47:/usr/include/c++/4.6/bits/stl_vector.h ****  * in supporting documentation.  Silicon Graphics makes no
  48:/usr/include/c++/4.6/bits/stl_vector.h ****  * representations about the suitability of this  software for any
  49:/usr/include/c++/4.6/bits/stl_vector.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  50:/usr/include/c++/4.6/bits/stl_vector.h ****  */
  51:/usr/include/c++/4.6/bits/stl_vector.h **** 
GAS LISTING /tmp/ccJa8FUH.s 			page 29


  52:/usr/include/c++/4.6/bits/stl_vector.h **** /** @file bits/stl_vector.h
  53:/usr/include/c++/4.6/bits/stl_vector.h ****  *  This is an internal header file, included by other library headers.
  54:/usr/include/c++/4.6/bits/stl_vector.h ****  *  Do not attempt to use it directly. @headername{vector}
  55:/usr/include/c++/4.6/bits/stl_vector.h ****  */
  56:/usr/include/c++/4.6/bits/stl_vector.h **** 
  57:/usr/include/c++/4.6/bits/stl_vector.h **** #ifndef _STL_VECTOR_H
  58:/usr/include/c++/4.6/bits/stl_vector.h **** #define _STL_VECTOR_H 1
  59:/usr/include/c++/4.6/bits/stl_vector.h **** 
  60:/usr/include/c++/4.6/bits/stl_vector.h **** #include <bits/stl_iterator_base_funcs.h>
  61:/usr/include/c++/4.6/bits/stl_vector.h **** #include <bits/functexcept.h>
  62:/usr/include/c++/4.6/bits/stl_vector.h **** #include <bits/concept_check.h>
  63:/usr/include/c++/4.6/bits/stl_vector.h **** #include <initializer_list>
  64:/usr/include/c++/4.6/bits/stl_vector.h **** 
  65:/usr/include/c++/4.6/bits/stl_vector.h **** namespace std _GLIBCXX_VISIBILITY(default)
  66:/usr/include/c++/4.6/bits/stl_vector.h **** {
  67:/usr/include/c++/4.6/bits/stl_vector.h **** _GLIBCXX_BEGIN_NAMESPACE_CONTAINER
  68:/usr/include/c++/4.6/bits/stl_vector.h **** 
  69:/usr/include/c++/4.6/bits/stl_vector.h ****   /// See bits/stl_deque.h's _Deque_base for an explanation.
  70:/usr/include/c++/4.6/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc>
  71:/usr/include/c++/4.6/bits/stl_vector.h ****     struct _Vector_base
  72:/usr/include/c++/4.6/bits/stl_vector.h ****     {
  73:/usr/include/c++/4.6/bits/stl_vector.h ****       typedef typename _Alloc::template rebind<_Tp>::other _Tp_alloc_type;
  74:/usr/include/c++/4.6/bits/stl_vector.h **** 
  75:/usr/include/c++/4.6/bits/stl_vector.h ****       struct _Vector_impl 
  76:/usr/include/c++/4.6/bits/stl_vector.h ****       : public _Tp_alloc_type
  77:/usr/include/c++/4.6/bits/stl_vector.h ****       {
  78:/usr/include/c++/4.6/bits/stl_vector.h **** 	typename _Tp_alloc_type::pointer _M_start;
  79:/usr/include/c++/4.6/bits/stl_vector.h **** 	typename _Tp_alloc_type::pointer _M_finish;
  80:/usr/include/c++/4.6/bits/stl_vector.h **** 	typename _Tp_alloc_type::pointer _M_end_of_storage;
  81:/usr/include/c++/4.6/bits/stl_vector.h **** 
  82:/usr/include/c++/4.6/bits/stl_vector.h **** 	_Vector_impl()
  83:/usr/include/c++/4.6/bits/stl_vector.h **** 	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  84:/usr/include/c++/4.6/bits/stl_vector.h **** 	{ }
  85:/usr/include/c++/4.6/bits/stl_vector.h **** 
  86:/usr/include/c++/4.6/bits/stl_vector.h **** 	_Vector_impl(_Tp_alloc_type const& __a)
  87:/usr/include/c++/4.6/bits/stl_vector.h **** 	: _Tp_alloc_type(__a), _M_start(0), _M_finish(0), _M_end_of_storage(0)
  88:/usr/include/c++/4.6/bits/stl_vector.h **** 	{ }
  89:/usr/include/c++/4.6/bits/stl_vector.h ****       };
  90:/usr/include/c++/4.6/bits/stl_vector.h ****       
  91:/usr/include/c++/4.6/bits/stl_vector.h ****     public:
  92:/usr/include/c++/4.6/bits/stl_vector.h ****       typedef _Alloc allocator_type;
  93:/usr/include/c++/4.6/bits/stl_vector.h **** 
  94:/usr/include/c++/4.6/bits/stl_vector.h ****       _Tp_alloc_type&
  95:/usr/include/c++/4.6/bits/stl_vector.h ****       _M_get_Tp_allocator()
  96:/usr/include/c++/4.6/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
  97:/usr/include/c++/4.6/bits/stl_vector.h **** 
  98:/usr/include/c++/4.6/bits/stl_vector.h ****       const _Tp_alloc_type&
  99:/usr/include/c++/4.6/bits/stl_vector.h ****       _M_get_Tp_allocator() const
 100:/usr/include/c++/4.6/bits/stl_vector.h ****       { return *static_cast<const _Tp_alloc_type*>(&this->_M_impl); }
 101:/usr/include/c++/4.6/bits/stl_vector.h **** 
 102:/usr/include/c++/4.6/bits/stl_vector.h ****       allocator_type
 103:/usr/include/c++/4.6/bits/stl_vector.h ****       get_allocator() const
 104:/usr/include/c++/4.6/bits/stl_vector.h ****       { return allocator_type(_M_get_Tp_allocator()); }
 105:/usr/include/c++/4.6/bits/stl_vector.h **** 
 106:/usr/include/c++/4.6/bits/stl_vector.h ****       _Vector_base()
 107:/usr/include/c++/4.6/bits/stl_vector.h ****       : _M_impl() { }
 108:/usr/include/c++/4.6/bits/stl_vector.h **** 
GAS LISTING /tmp/ccJa8FUH.s 			page 30


 109:/usr/include/c++/4.6/bits/stl_vector.h ****       _Vector_base(const allocator_type& __a)
 110:/usr/include/c++/4.6/bits/stl_vector.h ****       : _M_impl(__a) { }
 111:/usr/include/c++/4.6/bits/stl_vector.h **** 
 112:/usr/include/c++/4.6/bits/stl_vector.h ****       _Vector_base(size_t __n)
 113:/usr/include/c++/4.6/bits/stl_vector.h ****       : _M_impl()
 114:/usr/include/c++/4.6/bits/stl_vector.h ****       {
 115:/usr/include/c++/4.6/bits/stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 116:/usr/include/c++/4.6/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 117:/usr/include/c++/4.6/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 118:/usr/include/c++/4.6/bits/stl_vector.h ****       }
 119:/usr/include/c++/4.6/bits/stl_vector.h **** 
 120:/usr/include/c++/4.6/bits/stl_vector.h ****       _Vector_base(size_t __n, const allocator_type& __a)
 121:/usr/include/c++/4.6/bits/stl_vector.h ****       : _M_impl(__a)
 122:/usr/include/c++/4.6/bits/stl_vector.h ****       {
 123:/usr/include/c++/4.6/bits/stl_vector.h **** 	this->_M_impl._M_start = this->_M_allocate(__n);
 124:/usr/include/c++/4.6/bits/stl_vector.h **** 	this->_M_impl._M_finish = this->_M_impl._M_start;
 125:/usr/include/c++/4.6/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 126:/usr/include/c++/4.6/bits/stl_vector.h ****       }
 127:/usr/include/c++/4.6/bits/stl_vector.h **** 
 128:/usr/include/c++/4.6/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 129:/usr/include/c++/4.6/bits/stl_vector.h ****       _Vector_base(_Vector_base&& __x)
 130:/usr/include/c++/4.6/bits/stl_vector.h ****       : _M_impl(__x._M_get_Tp_allocator())
 131:/usr/include/c++/4.6/bits/stl_vector.h ****       {
 132:/usr/include/c++/4.6/bits/stl_vector.h **** 	this->_M_impl._M_start = __x._M_impl._M_start;
 133:/usr/include/c++/4.6/bits/stl_vector.h **** 	this->_M_impl._M_finish = __x._M_impl._M_finish;
 134:/usr/include/c++/4.6/bits/stl_vector.h **** 	this->_M_impl._M_end_of_storage = __x._M_impl._M_end_of_storage;
 135:/usr/include/c++/4.6/bits/stl_vector.h **** 	__x._M_impl._M_start = 0;
 136:/usr/include/c++/4.6/bits/stl_vector.h **** 	__x._M_impl._M_finish = 0;
 137:/usr/include/c++/4.6/bits/stl_vector.h **** 	__x._M_impl._M_end_of_storage = 0;
 138:/usr/include/c++/4.6/bits/stl_vector.h ****       }
 139:/usr/include/c++/4.6/bits/stl_vector.h **** #endif
 140:/usr/include/c++/4.6/bits/stl_vector.h **** 
 141:/usr/include/c++/4.6/bits/stl_vector.h ****       ~_Vector_base()
 142:/usr/include/c++/4.6/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 143:/usr/include/c++/4.6/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 144:/usr/include/c++/4.6/bits/stl_vector.h **** 
 145:/usr/include/c++/4.6/bits/stl_vector.h ****     public:
 146:/usr/include/c++/4.6/bits/stl_vector.h ****       _Vector_impl _M_impl;
 147:/usr/include/c++/4.6/bits/stl_vector.h **** 
 148:/usr/include/c++/4.6/bits/stl_vector.h ****       typename _Tp_alloc_type::pointer
 149:/usr/include/c++/4.6/bits/stl_vector.h ****       _M_allocate(size_t __n)
 150:/usr/include/c++/4.6/bits/stl_vector.h ****       { return __n != 0 ? _M_impl.allocate(__n) : 0; }
 151:/usr/include/c++/4.6/bits/stl_vector.h **** 
 152:/usr/include/c++/4.6/bits/stl_vector.h ****       void
 153:/usr/include/c++/4.6/bits/stl_vector.h ****       _M_deallocate(typename _Tp_alloc_type::pointer __p, size_t __n)
 154:/usr/include/c++/4.6/bits/stl_vector.h ****       {
 155:/usr/include/c++/4.6/bits/stl_vector.h **** 	if (__p)
 156:/usr/include/c++/4.6/bits/stl_vector.h **** 	  _M_impl.deallocate(__p, __n);
 157:/usr/include/c++/4.6/bits/stl_vector.h ****       }
 158:/usr/include/c++/4.6/bits/stl_vector.h ****     };
 159:/usr/include/c++/4.6/bits/stl_vector.h **** 
 160:/usr/include/c++/4.6/bits/stl_vector.h **** 
 161:/usr/include/c++/4.6/bits/stl_vector.h ****   /**
 162:/usr/include/c++/4.6/bits/stl_vector.h ****    *  @brief A standard container which offers fixed time access to
 163:/usr/include/c++/4.6/bits/stl_vector.h ****    *  individual elements in any order.
 164:/usr/include/c++/4.6/bits/stl_vector.h ****    *
 165:/usr/include/c++/4.6/bits/stl_vector.h ****    *  @ingroup sequences
GAS LISTING /tmp/ccJa8FUH.s 			page 31


 166:/usr/include/c++/4.6/bits/stl_vector.h ****    *
 167:/usr/include/c++/4.6/bits/stl_vector.h ****    *  Meets the requirements of a <a href="tables.html#65">container</a>, a
 168:/usr/include/c++/4.6/bits/stl_vector.h ****    *  <a href="tables.html#66">reversible container</a>, and a
 169:/usr/include/c++/4.6/bits/stl_vector.h ****    *  <a href="tables.html#67">sequence</a>, including the
 170:/usr/include/c++/4.6/bits/stl_vector.h ****    *  <a href="tables.html#68">optional sequence requirements</a> with the
 171:/usr/include/c++/4.6/bits/stl_vector.h ****    *  %exception of @c push_front and @c pop_front.
 172:/usr/include/c++/4.6/bits/stl_vector.h ****    *
 173:/usr/include/c++/4.6/bits/stl_vector.h ****    *  In some terminology a %vector can be described as a dynamic
 174:/usr/include/c++/4.6/bits/stl_vector.h ****    *  C-style array, it offers fast and efficient access to individual
 175:/usr/include/c++/4.6/bits/stl_vector.h ****    *  elements in any order and saves the user from worrying about
 176:/usr/include/c++/4.6/bits/stl_vector.h ****    *  memory and size allocation.  Subscripting ( @c [] ) access is
 177:/usr/include/c++/4.6/bits/stl_vector.h ****    *  also provided as with C-style arrays.
 178:/usr/include/c++/4.6/bits/stl_vector.h ****   */
 179:/usr/include/c++/4.6/bits/stl_vector.h ****   template<typename _Tp, typename _Alloc = std::allocator<_Tp> >
 180:/usr/include/c++/4.6/bits/stl_vector.h ****     class vector : protected _Vector_base<_Tp, _Alloc>
 181:/usr/include/c++/4.6/bits/stl_vector.h ****     {
 182:/usr/include/c++/4.6/bits/stl_vector.h ****       // Concept requirements.
 183:/usr/include/c++/4.6/bits/stl_vector.h ****       typedef typename _Alloc::value_type                _Alloc_value_type;
 184:/usr/include/c++/4.6/bits/stl_vector.h ****       __glibcxx_class_requires(_Tp, _SGIAssignableConcept)
 185:/usr/include/c++/4.6/bits/stl_vector.h ****       __glibcxx_class_requires2(_Tp, _Alloc_value_type, _SameTypeConcept)
 186:/usr/include/c++/4.6/bits/stl_vector.h ****       
 187:/usr/include/c++/4.6/bits/stl_vector.h ****       typedef _Vector_base<_Tp, _Alloc>			 _Base;
 188:/usr/include/c++/4.6/bits/stl_vector.h ****       typedef typename _Base::_Tp_alloc_type		 _Tp_alloc_type;
 189:/usr/include/c++/4.6/bits/stl_vector.h **** 
 190:/usr/include/c++/4.6/bits/stl_vector.h ****     public:
 191:/usr/include/c++/4.6/bits/stl_vector.h ****       typedef _Tp					 value_type;
 192:/usr/include/c++/4.6/bits/stl_vector.h ****       typedef typename _Tp_alloc_type::pointer           pointer;
 193:/usr/include/c++/4.6/bits/stl_vector.h ****       typedef typename _Tp_alloc_type::const_pointer     const_pointer;
 194:/usr/include/c++/4.6/bits/stl_vector.h ****       typedef typename _Tp_alloc_type::reference         reference;
 195:/usr/include/c++/4.6/bits/stl_vector.h ****       typedef typename _Tp_alloc_type::const_reference   const_reference;
 196:/usr/include/c++/4.6/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<pointer, vector> iterator;
 197:/usr/include/c++/4.6/bits/stl_vector.h ****       typedef __gnu_cxx::__normal_iterator<const_pointer, vector>
 198:/usr/include/c++/4.6/bits/stl_vector.h ****       const_iterator;
 199:/usr/include/c++/4.6/bits/stl_vector.h ****       typedef std::reverse_iterator<const_iterator>  const_reverse_iterator;
 200:/usr/include/c++/4.6/bits/stl_vector.h ****       typedef std::reverse_iterator<iterator>		 reverse_iterator;
 201:/usr/include/c++/4.6/bits/stl_vector.h ****       typedef size_t					 size_type;
 202:/usr/include/c++/4.6/bits/stl_vector.h ****       typedef ptrdiff_t					 difference_type;
 203:/usr/include/c++/4.6/bits/stl_vector.h ****       typedef _Alloc                        		 allocator_type;
 204:/usr/include/c++/4.6/bits/stl_vector.h **** 
 205:/usr/include/c++/4.6/bits/stl_vector.h ****     protected:
 206:/usr/include/c++/4.6/bits/stl_vector.h ****       using _Base::_M_allocate;
 207:/usr/include/c++/4.6/bits/stl_vector.h ****       using _Base::_M_deallocate;
 208:/usr/include/c++/4.6/bits/stl_vector.h ****       using _Base::_M_impl;
 209:/usr/include/c++/4.6/bits/stl_vector.h ****       using _Base::_M_get_Tp_allocator;
 210:/usr/include/c++/4.6/bits/stl_vector.h **** 
 211:/usr/include/c++/4.6/bits/stl_vector.h ****     public:
 212:/usr/include/c++/4.6/bits/stl_vector.h ****       // [23.2.4.1] construct/copy/destroy
 213:/usr/include/c++/4.6/bits/stl_vector.h ****       // (assign() and get_allocator() are also listed in this section)
 214:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 215:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @brief  Default constructor creates no elements.
 216:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 217:/usr/include/c++/4.6/bits/stl_vector.h ****       vector()
 218:/usr/include/c++/4.6/bits/stl_vector.h ****       : _Base() { }
 219:/usr/include/c++/4.6/bits/stl_vector.h **** 
 220:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 221:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @brief  Creates a %vector with no elements.
 222:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @param  a  An allocator object.
GAS LISTING /tmp/ccJa8FUH.s 			page 32


 223:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 224:/usr/include/c++/4.6/bits/stl_vector.h ****       explicit
 225:/usr/include/c++/4.6/bits/stl_vector.h ****       vector(const allocator_type& __a)
 226:/usr/include/c++/4.6/bits/stl_vector.h ****       : _Base(__a) { }
 227:/usr/include/c++/4.6/bits/stl_vector.h **** 
 228:/usr/include/c++/4.6/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 229:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 230:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @brief  Creates a %vector with default constructed elements.
 231:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @param  n  The number of elements to initially create.
 232:/usr/include/c++/4.6/bits/stl_vector.h ****        *
 233:/usr/include/c++/4.6/bits/stl_vector.h ****        *  This constructor fills the %vector with @a n default
 234:/usr/include/c++/4.6/bits/stl_vector.h ****        *  constructed elements.
 235:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 236:/usr/include/c++/4.6/bits/stl_vector.h ****       explicit
 237:/usr/include/c++/4.6/bits/stl_vector.h ****       vector(size_type __n)
 238:/usr/include/c++/4.6/bits/stl_vector.h ****       : _Base(__n)
 239:/usr/include/c++/4.6/bits/stl_vector.h ****       { _M_default_initialize(__n); }
 240:/usr/include/c++/4.6/bits/stl_vector.h **** 
 241:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 242:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 243:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @param  n  The number of elements to initially create.
 244:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @param  value  An element to copy.
 245:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @param  a  An allocator.
 246:/usr/include/c++/4.6/bits/stl_vector.h ****        *
 247:/usr/include/c++/4.6/bits/stl_vector.h ****        *  This constructor fills the %vector with @a n copies of @a value.
 248:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 249:/usr/include/c++/4.6/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value,
 250:/usr/include/c++/4.6/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 251:/usr/include/c++/4.6/bits/stl_vector.h ****       : _Base(__n, __a)
 252:/usr/include/c++/4.6/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 253:/usr/include/c++/4.6/bits/stl_vector.h **** #else
 254:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 255:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @brief  Creates a %vector with copies of an exemplar element.
 256:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @param  n  The number of elements to initially create.
 257:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @param  value  An element to copy.
 258:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @param  a  An allocator.
 259:/usr/include/c++/4.6/bits/stl_vector.h ****        *
 260:/usr/include/c++/4.6/bits/stl_vector.h ****        *  This constructor fills the %vector with @a n copies of @a value.
 261:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 262:/usr/include/c++/4.6/bits/stl_vector.h ****       explicit
 263:/usr/include/c++/4.6/bits/stl_vector.h ****       vector(size_type __n, const value_type& __value = value_type(),
 264:/usr/include/c++/4.6/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 265:/usr/include/c++/4.6/bits/stl_vector.h ****       : _Base(__n, __a)
 266:/usr/include/c++/4.6/bits/stl_vector.h ****       { _M_fill_initialize(__n, __value); }
 267:/usr/include/c++/4.6/bits/stl_vector.h **** #endif
 268:/usr/include/c++/4.6/bits/stl_vector.h **** 
 269:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 270:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @brief  %Vector copy constructor.
 271:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @param  x  A %vector of identical element and allocator types.
 272:/usr/include/c++/4.6/bits/stl_vector.h ****        *
 273:/usr/include/c++/4.6/bits/stl_vector.h ****        *  The newly-created %vector uses a copy of the allocation
 274:/usr/include/c++/4.6/bits/stl_vector.h ****        *  object used by @a x.  All the elements of @a x are copied,
 275:/usr/include/c++/4.6/bits/stl_vector.h ****        *  but any extra memory in
 276:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @a x (for fast expansion) will not be copied.
 277:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 278:/usr/include/c++/4.6/bits/stl_vector.h ****       vector(const vector& __x)
 279:/usr/include/c++/4.6/bits/stl_vector.h ****       : _Base(__x.size(), __x._M_get_Tp_allocator())
GAS LISTING /tmp/ccJa8FUH.s 			page 33


 280:/usr/include/c++/4.6/bits/stl_vector.h ****       { this->_M_impl._M_finish =
 281:/usr/include/c++/4.6/bits/stl_vector.h **** 	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 282:/usr/include/c++/4.6/bits/stl_vector.h **** 				      this->_M_impl._M_start,
 283:/usr/include/c++/4.6/bits/stl_vector.h **** 				      _M_get_Tp_allocator());
 284:/usr/include/c++/4.6/bits/stl_vector.h ****       }
 285:/usr/include/c++/4.6/bits/stl_vector.h **** 
 286:/usr/include/c++/4.6/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 287:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 288:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @brief  %Vector move constructor.
 289:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @param  x  A %vector of identical element and allocator types.
 290:/usr/include/c++/4.6/bits/stl_vector.h ****        *
 291:/usr/include/c++/4.6/bits/stl_vector.h ****        *  The newly-created %vector contains the exact contents of @a x.
 292:/usr/include/c++/4.6/bits/stl_vector.h ****        *  The contents of @a x are a valid, but unspecified %vector.
 293:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 294:/usr/include/c++/4.6/bits/stl_vector.h ****       vector(vector&& __x)
 295:/usr/include/c++/4.6/bits/stl_vector.h ****       : _Base(std::move(__x)) { }
 296:/usr/include/c++/4.6/bits/stl_vector.h **** 
 297:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 298:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @brief  Builds a %vector from an initializer list.
 299:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @param  l  An initializer_list.
 300:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @param  a  An allocator.
 301:/usr/include/c++/4.6/bits/stl_vector.h ****        *
 302:/usr/include/c++/4.6/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements in the
 303:/usr/include/c++/4.6/bits/stl_vector.h ****        *  initializer_list @a l.
 304:/usr/include/c++/4.6/bits/stl_vector.h ****        *
 305:/usr/include/c++/4.6/bits/stl_vector.h ****        *  This will call the element type's copy constructor N times
 306:/usr/include/c++/4.6/bits/stl_vector.h ****        *  (where N is @a l.size()) and do no memory reallocation.
 307:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 308:/usr/include/c++/4.6/bits/stl_vector.h ****       vector(initializer_list<value_type> __l,
 309:/usr/include/c++/4.6/bits/stl_vector.h **** 	     const allocator_type& __a = allocator_type())
 310:/usr/include/c++/4.6/bits/stl_vector.h ****       : _Base(__a)
 311:/usr/include/c++/4.6/bits/stl_vector.h ****       {
 312:/usr/include/c++/4.6/bits/stl_vector.h **** 	_M_range_initialize(__l.begin(), __l.end(),
 313:/usr/include/c++/4.6/bits/stl_vector.h **** 			    random_access_iterator_tag());
 314:/usr/include/c++/4.6/bits/stl_vector.h ****       }
 315:/usr/include/c++/4.6/bits/stl_vector.h **** #endif
 316:/usr/include/c++/4.6/bits/stl_vector.h **** 
 317:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 318:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @brief  Builds a %vector from a range.
 319:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @param  first  An input iterator.
 320:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @param  last  An input iterator.
 321:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @param  a  An allocator.
 322:/usr/include/c++/4.6/bits/stl_vector.h ****        *
 323:/usr/include/c++/4.6/bits/stl_vector.h ****        *  Create a %vector consisting of copies of the elements from
 324:/usr/include/c++/4.6/bits/stl_vector.h ****        *  [first,last).
 325:/usr/include/c++/4.6/bits/stl_vector.h ****        *
 326:/usr/include/c++/4.6/bits/stl_vector.h ****        *  If the iterators are forward, bidirectional, or
 327:/usr/include/c++/4.6/bits/stl_vector.h ****        *  random-access, then this will call the elements' copy
 328:/usr/include/c++/4.6/bits/stl_vector.h ****        *  constructor N times (where N is distance(first,last)) and do
 329:/usr/include/c++/4.6/bits/stl_vector.h ****        *  no memory reallocation.  But if only input iterators are
 330:/usr/include/c++/4.6/bits/stl_vector.h ****        *  used, then this will do at most 2N calls to the copy
 331:/usr/include/c++/4.6/bits/stl_vector.h ****        *  constructor, and logN memory reallocations.
 332:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 333:/usr/include/c++/4.6/bits/stl_vector.h ****       template<typename _InputIterator>
 334:/usr/include/c++/4.6/bits/stl_vector.h ****         vector(_InputIterator __first, _InputIterator __last,
 335:/usr/include/c++/4.6/bits/stl_vector.h **** 	       const allocator_type& __a = allocator_type())
 336:/usr/include/c++/4.6/bits/stl_vector.h **** 	: _Base(__a)
GAS LISTING /tmp/ccJa8FUH.s 			page 34


 337:/usr/include/c++/4.6/bits/stl_vector.h ****         {
 338:/usr/include/c++/4.6/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 339:/usr/include/c++/4.6/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 340:/usr/include/c++/4.6/bits/stl_vector.h **** 	  _M_initialize_dispatch(__first, __last, _Integral());
 341:/usr/include/c++/4.6/bits/stl_vector.h **** 	}
 342:/usr/include/c++/4.6/bits/stl_vector.h **** 
 343:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 344:/usr/include/c++/4.6/bits/stl_vector.h ****        *  The dtor only erases the elements, and note that if the
 345:/usr/include/c++/4.6/bits/stl_vector.h ****        *  elements themselves are pointers, the pointed-to memory is
 346:/usr/include/c++/4.6/bits/stl_vector.h ****        *  not touched in any way.  Managing the pointer is the user's
 347:/usr/include/c++/4.6/bits/stl_vector.h ****        *  responsibility.
 348:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 349:/usr/include/c++/4.6/bits/stl_vector.h ****       ~vector()
 350:/usr/include/c++/4.6/bits/stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 351:/usr/include/c++/4.6/bits/stl_vector.h **** 		      _M_get_Tp_allocator()); }
 352:/usr/include/c++/4.6/bits/stl_vector.h **** 
 353:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 354:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @brief  %Vector assignment operator.
 355:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @param  x  A %vector of identical element and allocator types.
 356:/usr/include/c++/4.6/bits/stl_vector.h ****        *
 357:/usr/include/c++/4.6/bits/stl_vector.h ****        *  All the elements of @a x are copied, but any extra memory in
 358:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @a x (for fast expansion) will not be copied.  Unlike the
 359:/usr/include/c++/4.6/bits/stl_vector.h ****        *  copy constructor, the allocator object is not copied.
 360:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 361:/usr/include/c++/4.6/bits/stl_vector.h ****       vector&
 362:/usr/include/c++/4.6/bits/stl_vector.h ****       operator=(const vector& __x);
 363:/usr/include/c++/4.6/bits/stl_vector.h **** 
 364:/usr/include/c++/4.6/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 365:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 366:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @brief  %Vector move assignment operator.
 367:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @param  x  A %vector of identical element and allocator types.
 368:/usr/include/c++/4.6/bits/stl_vector.h ****        *
 369:/usr/include/c++/4.6/bits/stl_vector.h ****        *  The contents of @a x are moved into this %vector (without copying).
 370:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @a x is a valid, but unspecified %vector.
 371:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 372:/usr/include/c++/4.6/bits/stl_vector.h ****       vector&
 373:/usr/include/c++/4.6/bits/stl_vector.h ****       operator=(vector&& __x)
 374:/usr/include/c++/4.6/bits/stl_vector.h ****       {
 375:/usr/include/c++/4.6/bits/stl_vector.h **** 	// NB: DR 1204.
 376:/usr/include/c++/4.6/bits/stl_vector.h **** 	// NB: DR 675.
 377:/usr/include/c++/4.6/bits/stl_vector.h **** 	this->clear();
 378:/usr/include/c++/4.6/bits/stl_vector.h **** 	this->swap(__x);
 379:/usr/include/c++/4.6/bits/stl_vector.h **** 	return *this;
 380:/usr/include/c++/4.6/bits/stl_vector.h ****       }
 381:/usr/include/c++/4.6/bits/stl_vector.h **** 
 382:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 383:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @brief  %Vector list assignment operator.
 384:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @param  l  An initializer_list.
 385:/usr/include/c++/4.6/bits/stl_vector.h ****        *
 386:/usr/include/c++/4.6/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 387:/usr/include/c++/4.6/bits/stl_vector.h ****        *  initializer list @a l.
 388:/usr/include/c++/4.6/bits/stl_vector.h ****        *
 389:/usr/include/c++/4.6/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 390:/usr/include/c++/4.6/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 391:/usr/include/c++/4.6/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 392:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 393:/usr/include/c++/4.6/bits/stl_vector.h ****       vector&
GAS LISTING /tmp/ccJa8FUH.s 			page 35


 394:/usr/include/c++/4.6/bits/stl_vector.h ****       operator=(initializer_list<value_type> __l)
 395:/usr/include/c++/4.6/bits/stl_vector.h ****       {
 396:/usr/include/c++/4.6/bits/stl_vector.h **** 	this->assign(__l.begin(), __l.end());
 397:/usr/include/c++/4.6/bits/stl_vector.h **** 	return *this;
 398:/usr/include/c++/4.6/bits/stl_vector.h ****       }
 399:/usr/include/c++/4.6/bits/stl_vector.h **** #endif
 400:/usr/include/c++/4.6/bits/stl_vector.h **** 
 401:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 402:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @brief  Assigns a given value to a %vector.
 403:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @param  n  Number of elements to be assigned.
 404:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @param  val  Value to be assigned.
 405:/usr/include/c++/4.6/bits/stl_vector.h ****        *
 406:/usr/include/c++/4.6/bits/stl_vector.h ****        *  This function fills a %vector with @a n copies of the given
 407:/usr/include/c++/4.6/bits/stl_vector.h ****        *  value.  Note that the assignment completely changes the
 408:/usr/include/c++/4.6/bits/stl_vector.h ****        *  %vector and that the resulting %vector's size is the same as
 409:/usr/include/c++/4.6/bits/stl_vector.h ****        *  the number of elements assigned.  Old data may be lost.
 410:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 411:/usr/include/c++/4.6/bits/stl_vector.h ****       void
 412:/usr/include/c++/4.6/bits/stl_vector.h ****       assign(size_type __n, const value_type& __val)
 413:/usr/include/c++/4.6/bits/stl_vector.h ****       { _M_fill_assign(__n, __val); }
 414:/usr/include/c++/4.6/bits/stl_vector.h **** 
 415:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 416:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @brief  Assigns a range to a %vector.
 417:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @param  first  An input iterator.
 418:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @param  last   An input iterator.
 419:/usr/include/c++/4.6/bits/stl_vector.h ****        *
 420:/usr/include/c++/4.6/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 421:/usr/include/c++/4.6/bits/stl_vector.h ****        *  range [first,last).
 422:/usr/include/c++/4.6/bits/stl_vector.h ****        *
 423:/usr/include/c++/4.6/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 424:/usr/include/c++/4.6/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 425:/usr/include/c++/4.6/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 426:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 427:/usr/include/c++/4.6/bits/stl_vector.h ****       template<typename _InputIterator>
 428:/usr/include/c++/4.6/bits/stl_vector.h ****         void
 429:/usr/include/c++/4.6/bits/stl_vector.h ****         assign(_InputIterator __first, _InputIterator __last)
 430:/usr/include/c++/4.6/bits/stl_vector.h ****         {
 431:/usr/include/c++/4.6/bits/stl_vector.h **** 	  // Check whether it's an integral type.  If so, it's not an iterator.
 432:/usr/include/c++/4.6/bits/stl_vector.h **** 	  typedef typename std::__is_integer<_InputIterator>::__type _Integral;
 433:/usr/include/c++/4.6/bits/stl_vector.h **** 	  _M_assign_dispatch(__first, __last, _Integral());
 434:/usr/include/c++/4.6/bits/stl_vector.h **** 	}
 435:/usr/include/c++/4.6/bits/stl_vector.h **** 
 436:/usr/include/c++/4.6/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 437:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 438:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @brief  Assigns an initializer list to a %vector.
 439:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @param  l  An initializer_list.
 440:/usr/include/c++/4.6/bits/stl_vector.h ****        *
 441:/usr/include/c++/4.6/bits/stl_vector.h ****        *  This function fills a %vector with copies of the elements in the
 442:/usr/include/c++/4.6/bits/stl_vector.h ****        *  initializer list @a l.
 443:/usr/include/c++/4.6/bits/stl_vector.h ****        *
 444:/usr/include/c++/4.6/bits/stl_vector.h ****        *  Note that the assignment completely changes the %vector and
 445:/usr/include/c++/4.6/bits/stl_vector.h ****        *  that the resulting %vector's size is the same as the number
 446:/usr/include/c++/4.6/bits/stl_vector.h ****        *  of elements assigned.  Old data may be lost.
 447:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 448:/usr/include/c++/4.6/bits/stl_vector.h ****       void
 449:/usr/include/c++/4.6/bits/stl_vector.h ****       assign(initializer_list<value_type> __l)
 450:/usr/include/c++/4.6/bits/stl_vector.h ****       { this->assign(__l.begin(), __l.end()); }
GAS LISTING /tmp/ccJa8FUH.s 			page 36


 451:/usr/include/c++/4.6/bits/stl_vector.h **** #endif
 452:/usr/include/c++/4.6/bits/stl_vector.h **** 
 453:/usr/include/c++/4.6/bits/stl_vector.h ****       /// Get a copy of the memory allocation object.
 454:/usr/include/c++/4.6/bits/stl_vector.h ****       using _Base::get_allocator;
 455:/usr/include/c++/4.6/bits/stl_vector.h **** 
 456:/usr/include/c++/4.6/bits/stl_vector.h ****       // iterators
 457:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 458:/usr/include/c++/4.6/bits/stl_vector.h ****        *  Returns a read/write iterator that points to the first
 459:/usr/include/c++/4.6/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 460:/usr/include/c++/4.6/bits/stl_vector.h ****        *  element order.
 461:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 462:/usr/include/c++/4.6/bits/stl_vector.h ****       iterator
 463:/usr/include/c++/4.6/bits/stl_vector.h ****       begin()
 464:/usr/include/c++/4.6/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_start); }
 465:/usr/include/c++/4.6/bits/stl_vector.h **** 
 466:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 467:/usr/include/c++/4.6/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 468:/usr/include/c++/4.6/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 469:/usr/include/c++/4.6/bits/stl_vector.h ****        *  element order.
 470:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 471:/usr/include/c++/4.6/bits/stl_vector.h ****       const_iterator
 472:/usr/include/c++/4.6/bits/stl_vector.h ****       begin() const
 473:/usr/include/c++/4.6/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 474:/usr/include/c++/4.6/bits/stl_vector.h **** 
 475:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 476:/usr/include/c++/4.6/bits/stl_vector.h ****        *  Returns a read/write iterator that points one past the last
 477:/usr/include/c++/4.6/bits/stl_vector.h ****        *  element in the %vector.  Iteration is done in ordinary
 478:/usr/include/c++/4.6/bits/stl_vector.h ****        *  element order.
 479:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 480:/usr/include/c++/4.6/bits/stl_vector.h ****       iterator
 481:/usr/include/c++/4.6/bits/stl_vector.h ****       end()
 482:/usr/include/c++/4.6/bits/stl_vector.h ****       { return iterator(this->_M_impl._M_finish); }
 483:/usr/include/c++/4.6/bits/stl_vector.h **** 
 484:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 485:/usr/include/c++/4.6/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 486:/usr/include/c++/4.6/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 487:/usr/include/c++/4.6/bits/stl_vector.h ****        *  ordinary element order.
 488:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 489:/usr/include/c++/4.6/bits/stl_vector.h ****       const_iterator
 490:/usr/include/c++/4.6/bits/stl_vector.h ****       end() const
 491:/usr/include/c++/4.6/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 492:/usr/include/c++/4.6/bits/stl_vector.h **** 
 493:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 494:/usr/include/c++/4.6/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to the
 495:/usr/include/c++/4.6/bits/stl_vector.h ****        *  last element in the %vector.  Iteration is done in reverse
 496:/usr/include/c++/4.6/bits/stl_vector.h ****        *  element order.
 497:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 498:/usr/include/c++/4.6/bits/stl_vector.h ****       reverse_iterator
 499:/usr/include/c++/4.6/bits/stl_vector.h ****       rbegin()
 500:/usr/include/c++/4.6/bits/stl_vector.h ****       { return reverse_iterator(end()); }
 501:/usr/include/c++/4.6/bits/stl_vector.h **** 
 502:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 503:/usr/include/c++/4.6/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 504:/usr/include/c++/4.6/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 505:/usr/include/c++/4.6/bits/stl_vector.h ****        *  reverse element order.
 506:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 507:/usr/include/c++/4.6/bits/stl_vector.h ****       const_reverse_iterator
GAS LISTING /tmp/ccJa8FUH.s 			page 37


 508:/usr/include/c++/4.6/bits/stl_vector.h ****       rbegin() const
 509:/usr/include/c++/4.6/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 510:/usr/include/c++/4.6/bits/stl_vector.h **** 
 511:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 512:/usr/include/c++/4.6/bits/stl_vector.h ****        *  Returns a read/write reverse iterator that points to one
 513:/usr/include/c++/4.6/bits/stl_vector.h ****        *  before the first element in the %vector.  Iteration is done
 514:/usr/include/c++/4.6/bits/stl_vector.h ****        *  in reverse element order.
 515:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 516:/usr/include/c++/4.6/bits/stl_vector.h ****       reverse_iterator
 517:/usr/include/c++/4.6/bits/stl_vector.h ****       rend()
 518:/usr/include/c++/4.6/bits/stl_vector.h ****       { return reverse_iterator(begin()); }
 519:/usr/include/c++/4.6/bits/stl_vector.h **** 
 520:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 521:/usr/include/c++/4.6/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 522:/usr/include/c++/4.6/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 523:/usr/include/c++/4.6/bits/stl_vector.h ****        *  is done in reverse element order.
 524:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 525:/usr/include/c++/4.6/bits/stl_vector.h ****       const_reverse_iterator
 526:/usr/include/c++/4.6/bits/stl_vector.h ****       rend() const
 527:/usr/include/c++/4.6/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
 528:/usr/include/c++/4.6/bits/stl_vector.h **** 
 529:/usr/include/c++/4.6/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 530:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 531:/usr/include/c++/4.6/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points to the
 532:/usr/include/c++/4.6/bits/stl_vector.h ****        *  first element in the %vector.  Iteration is done in ordinary
 533:/usr/include/c++/4.6/bits/stl_vector.h ****        *  element order.
 534:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 535:/usr/include/c++/4.6/bits/stl_vector.h ****       const_iterator
 536:/usr/include/c++/4.6/bits/stl_vector.h ****       cbegin() const
 537:/usr/include/c++/4.6/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_start); }
 538:/usr/include/c++/4.6/bits/stl_vector.h **** 
 539:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 540:/usr/include/c++/4.6/bits/stl_vector.h ****        *  Returns a read-only (constant) iterator that points one past
 541:/usr/include/c++/4.6/bits/stl_vector.h ****        *  the last element in the %vector.  Iteration is done in
 542:/usr/include/c++/4.6/bits/stl_vector.h ****        *  ordinary element order.
 543:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 544:/usr/include/c++/4.6/bits/stl_vector.h ****       const_iterator
 545:/usr/include/c++/4.6/bits/stl_vector.h ****       cend() const
 546:/usr/include/c++/4.6/bits/stl_vector.h ****       { return const_iterator(this->_M_impl._M_finish); }
 547:/usr/include/c++/4.6/bits/stl_vector.h **** 
 548:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 549:/usr/include/c++/4.6/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 550:/usr/include/c++/4.6/bits/stl_vector.h ****        *  to the last element in the %vector.  Iteration is done in
 551:/usr/include/c++/4.6/bits/stl_vector.h ****        *  reverse element order.
 552:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 553:/usr/include/c++/4.6/bits/stl_vector.h ****       const_reverse_iterator
 554:/usr/include/c++/4.6/bits/stl_vector.h ****       crbegin() const
 555:/usr/include/c++/4.6/bits/stl_vector.h ****       { return const_reverse_iterator(end()); }
 556:/usr/include/c++/4.6/bits/stl_vector.h **** 
 557:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 558:/usr/include/c++/4.6/bits/stl_vector.h ****        *  Returns a read-only (constant) reverse iterator that points
 559:/usr/include/c++/4.6/bits/stl_vector.h ****        *  to one before the first element in the %vector.  Iteration
 560:/usr/include/c++/4.6/bits/stl_vector.h ****        *  is done in reverse element order.
 561:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 562:/usr/include/c++/4.6/bits/stl_vector.h ****       const_reverse_iterator
 563:/usr/include/c++/4.6/bits/stl_vector.h ****       crend() const
 564:/usr/include/c++/4.6/bits/stl_vector.h ****       { return const_reverse_iterator(begin()); }
GAS LISTING /tmp/ccJa8FUH.s 			page 38


 565:/usr/include/c++/4.6/bits/stl_vector.h **** #endif
 566:/usr/include/c++/4.6/bits/stl_vector.h **** 
 567:/usr/include/c++/4.6/bits/stl_vector.h ****       // [23.2.4.2] capacity
 568:/usr/include/c++/4.6/bits/stl_vector.h ****       /**  Returns the number of elements in the %vector.  */
 569:/usr/include/c++/4.6/bits/stl_vector.h ****       size_type
 570:/usr/include/c++/4.6/bits/stl_vector.h ****       size() const
 1026              		.loc 2 570 0
 1027              		.cfi_startproc
 1028 0000 55       		pushq	%rbp
 1029              	.LCFI10:
 1030              		.cfi_def_cfa_offset 16
 1031              		.cfi_offset 6, -16
 1032 0001 4889E5   		movq	%rsp, %rbp
 1033              	.LCFI11:
 1034              		.cfi_def_cfa_register 6
 1035 0004 48897DF8 		movq	%rdi, -8(%rbp)
 571:/usr/include/c++/4.6/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 1036              		.loc 2 571 0
 1037 0008 488B45F8 		movq	-8(%rbp), %rax
 1038 000c 488B4008 		movq	8(%rax), %rax
 1039 0010 4889C2   		movq	%rax, %rdx
 1040 0013 488B45F8 		movq	-8(%rbp), %rax
 1041 0017 488B00   		movq	(%rax), %rax
 1042 001a 4889D1   		movq	%rdx, %rcx
 1043 001d 4829C1   		subq	%rax, %rcx
 1044 0020 4889C8   		movq	%rcx, %rax
 1045 0023 4889C2   		movq	%rax, %rdx
 1046 0026 48C1FA03 		sarq	$3, %rdx
 1047 002a 48B8B76D 		movabsq	$7905747460161236407, %rax
 1047      DBB66DDB 
 1047      B66D
 1048 0034 480FAFC2 		imulq	%rdx, %rax
 1049 0038 5D       		popq	%rbp
 1050              	.LCFI12:
 1051              		.cfi_def_cfa 7, 8
 1052 0039 C3       		ret
 1053              		.cfi_endproc
 1054              	.LFE1469:
 1056              		.section	.text._ZNSt6vectorI5pointSaIS0_EEixEm,"axG",@progbits,_ZNSt6vectorI5pointSaIS0_EEixEm,com
 1057              		.align 2
 1058              		.weak	_ZNSt6vectorI5pointSaIS0_EEixEm
 1060              	_ZNSt6vectorI5pointSaIS0_EEixEm:
 1061              	.LFB1470:
 572:/usr/include/c++/4.6/bits/stl_vector.h **** 
 573:/usr/include/c++/4.6/bits/stl_vector.h ****       /**  Returns the size() of the largest possible %vector.  */
 574:/usr/include/c++/4.6/bits/stl_vector.h ****       size_type
 575:/usr/include/c++/4.6/bits/stl_vector.h ****       max_size() const
 576:/usr/include/c++/4.6/bits/stl_vector.h ****       { return _M_get_Tp_allocator().max_size(); }
 577:/usr/include/c++/4.6/bits/stl_vector.h **** 
 578:/usr/include/c++/4.6/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 579:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 580:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 581:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @param  new_size  Number of elements the %vector should contain.
 582:/usr/include/c++/4.6/bits/stl_vector.h ****        *
 583:/usr/include/c++/4.6/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 584:/usr/include/c++/4.6/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 585:/usr/include/c++/4.6/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
GAS LISTING /tmp/ccJa8FUH.s 			page 39


 586:/usr/include/c++/4.6/bits/stl_vector.h ****        *  default constructed elements are appended.
 587:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 588:/usr/include/c++/4.6/bits/stl_vector.h ****       void
 589:/usr/include/c++/4.6/bits/stl_vector.h ****       resize(size_type __new_size)
 590:/usr/include/c++/4.6/bits/stl_vector.h ****       {
 591:/usr/include/c++/4.6/bits/stl_vector.h **** 	if (__new_size > size())
 592:/usr/include/c++/4.6/bits/stl_vector.h **** 	  _M_default_append(__new_size - size());
 593:/usr/include/c++/4.6/bits/stl_vector.h **** 	else if (__new_size < size())
 594:/usr/include/c++/4.6/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 595:/usr/include/c++/4.6/bits/stl_vector.h ****       }
 596:/usr/include/c++/4.6/bits/stl_vector.h **** 
 597:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 598:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 599:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @param  new_size  Number of elements the %vector should contain.
 600:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @param  x  Data with which new elements should be populated.
 601:/usr/include/c++/4.6/bits/stl_vector.h ****        *
 602:/usr/include/c++/4.6/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 603:/usr/include/c++/4.6/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 604:/usr/include/c++/4.6/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 605:/usr/include/c++/4.6/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 606:/usr/include/c++/4.6/bits/stl_vector.h ****        *  given data.
 607:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 608:/usr/include/c++/4.6/bits/stl_vector.h ****       void
 609:/usr/include/c++/4.6/bits/stl_vector.h ****       resize(size_type __new_size, const value_type& __x)
 610:/usr/include/c++/4.6/bits/stl_vector.h ****       {
 611:/usr/include/c++/4.6/bits/stl_vector.h **** 	if (__new_size > size())
 612:/usr/include/c++/4.6/bits/stl_vector.h **** 	  insert(end(), __new_size - size(), __x);
 613:/usr/include/c++/4.6/bits/stl_vector.h **** 	else if (__new_size < size())
 614:/usr/include/c++/4.6/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 615:/usr/include/c++/4.6/bits/stl_vector.h ****       }
 616:/usr/include/c++/4.6/bits/stl_vector.h **** #else
 617:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 618:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @brief  Resizes the %vector to the specified number of elements.
 619:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @param  new_size  Number of elements the %vector should contain.
 620:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @param  x  Data with which new elements should be populated.
 621:/usr/include/c++/4.6/bits/stl_vector.h ****        *
 622:/usr/include/c++/4.6/bits/stl_vector.h ****        *  This function will %resize the %vector to the specified
 623:/usr/include/c++/4.6/bits/stl_vector.h ****        *  number of elements.  If the number is smaller than the
 624:/usr/include/c++/4.6/bits/stl_vector.h ****        *  %vector's current size the %vector is truncated, otherwise
 625:/usr/include/c++/4.6/bits/stl_vector.h ****        *  the %vector is extended and new elements are populated with
 626:/usr/include/c++/4.6/bits/stl_vector.h ****        *  given data.
 627:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 628:/usr/include/c++/4.6/bits/stl_vector.h ****       void
 629:/usr/include/c++/4.6/bits/stl_vector.h ****       resize(size_type __new_size, value_type __x = value_type())
 630:/usr/include/c++/4.6/bits/stl_vector.h ****       {
 631:/usr/include/c++/4.6/bits/stl_vector.h **** 	if (__new_size > size())
 632:/usr/include/c++/4.6/bits/stl_vector.h **** 	  insert(end(), __new_size - size(), __x);
 633:/usr/include/c++/4.6/bits/stl_vector.h **** 	else if (__new_size < size())
 634:/usr/include/c++/4.6/bits/stl_vector.h **** 	  _M_erase_at_end(this->_M_impl._M_start + __new_size);
 635:/usr/include/c++/4.6/bits/stl_vector.h ****       }
 636:/usr/include/c++/4.6/bits/stl_vector.h **** #endif
 637:/usr/include/c++/4.6/bits/stl_vector.h **** 
 638:/usr/include/c++/4.6/bits/stl_vector.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
 639:/usr/include/c++/4.6/bits/stl_vector.h ****       /**  A non-binding request to reduce capacity() to size().  */
 640:/usr/include/c++/4.6/bits/stl_vector.h ****       void
 641:/usr/include/c++/4.6/bits/stl_vector.h ****       shrink_to_fit()
 642:/usr/include/c++/4.6/bits/stl_vector.h ****       { std::__shrink_to_fit<vector>::_S_do_it(*this); }
GAS LISTING /tmp/ccJa8FUH.s 			page 40


 643:/usr/include/c++/4.6/bits/stl_vector.h **** #endif
 644:/usr/include/c++/4.6/bits/stl_vector.h **** 
 645:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 646:/usr/include/c++/4.6/bits/stl_vector.h ****        *  Returns the total number of elements that the %vector can
 647:/usr/include/c++/4.6/bits/stl_vector.h ****        *  hold before needing to allocate more memory.
 648:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 649:/usr/include/c++/4.6/bits/stl_vector.h ****       size_type
 650:/usr/include/c++/4.6/bits/stl_vector.h ****       capacity() const
 651:/usr/include/c++/4.6/bits/stl_vector.h ****       { return size_type(this->_M_impl._M_end_of_storage
 652:/usr/include/c++/4.6/bits/stl_vector.h **** 			 - this->_M_impl._M_start); }
 653:/usr/include/c++/4.6/bits/stl_vector.h **** 
 654:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 655:/usr/include/c++/4.6/bits/stl_vector.h ****        *  Returns true if the %vector is empty.  (Thus begin() would
 656:/usr/include/c++/4.6/bits/stl_vector.h ****        *  equal end().)
 657:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 658:/usr/include/c++/4.6/bits/stl_vector.h ****       bool
 659:/usr/include/c++/4.6/bits/stl_vector.h ****       empty() const
 660:/usr/include/c++/4.6/bits/stl_vector.h ****       { return begin() == end(); }
 661:/usr/include/c++/4.6/bits/stl_vector.h **** 
 662:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 663:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @brief  Attempt to preallocate enough memory for specified number of
 664:/usr/include/c++/4.6/bits/stl_vector.h ****        *          elements.
 665:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @param  n  Number of elements required.
 666:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @throw  std::length_error  If @a n exceeds @c max_size().
 667:/usr/include/c++/4.6/bits/stl_vector.h ****        *
 668:/usr/include/c++/4.6/bits/stl_vector.h ****        *  This function attempts to reserve enough memory for the
 669:/usr/include/c++/4.6/bits/stl_vector.h ****        *  %vector to hold the specified number of elements.  If the
 670:/usr/include/c++/4.6/bits/stl_vector.h ****        *  number requested is more than max_size(), length_error is
 671:/usr/include/c++/4.6/bits/stl_vector.h ****        *  thrown.
 672:/usr/include/c++/4.6/bits/stl_vector.h ****        *
 673:/usr/include/c++/4.6/bits/stl_vector.h ****        *  The advantage of this function is that if optimal code is a
 674:/usr/include/c++/4.6/bits/stl_vector.h ****        *  necessity and the user can determine the number of elements
 675:/usr/include/c++/4.6/bits/stl_vector.h ****        *  that will be required, the user can reserve the memory in
 676:/usr/include/c++/4.6/bits/stl_vector.h ****        *  %advance, and thus prevent a possible reallocation of memory
 677:/usr/include/c++/4.6/bits/stl_vector.h ****        *  and copying of %vector data.
 678:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 679:/usr/include/c++/4.6/bits/stl_vector.h ****       void
 680:/usr/include/c++/4.6/bits/stl_vector.h ****       reserve(size_type __n);
 681:/usr/include/c++/4.6/bits/stl_vector.h **** 
 682:/usr/include/c++/4.6/bits/stl_vector.h ****       // element access
 683:/usr/include/c++/4.6/bits/stl_vector.h ****       /**
 684:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @brief  Subscript access to the data contained in the %vector.
 685:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @param n The index of the element for which data should be
 686:/usr/include/c++/4.6/bits/stl_vector.h ****        *  accessed.
 687:/usr/include/c++/4.6/bits/stl_vector.h ****        *  @return  Read/write reference to data.
 688:/usr/include/c++/4.6/bits/stl_vector.h ****        *
 689:/usr/include/c++/4.6/bits/stl_vector.h ****        *  This operator allows for easy, array-style, data access.
 690:/usr/include/c++/4.6/bits/stl_vector.h ****        *  Note that data access with this operator is unchecked and
 691:/usr/include/c++/4.6/bits/stl_vector.h ****        *  out_of_range lookups are not defined. (For checked lookups
 692:/usr/include/c++/4.6/bits/stl_vector.h ****        *  see at().)
 693:/usr/include/c++/4.6/bits/stl_vector.h ****        */
 694:/usr/include/c++/4.6/bits/stl_vector.h ****       reference
 695:/usr/include/c++/4.6/bits/stl_vector.h ****       operator[](size_type __n)
 1062              		.loc 2 695 0
 1063              		.cfi_startproc
 1064 0000 55       		pushq	%rbp
 1065              	.LCFI13:
GAS LISTING /tmp/ccJa8FUH.s 			page 41


 1066              		.cfi_def_cfa_offset 16
 1067              		.cfi_offset 6, -16
 1068 0001 4889E5   		movq	%rsp, %rbp
 1069              	.LCFI14:
 1070              		.cfi_def_cfa_register 6
 1071 0004 53       		pushq	%rbx
 1072 0005 48897DF0 		movq	%rdi, -16(%rbp)
 1073 0009 488975E8 		movq	%rsi, -24(%rbp)
 696:/usr/include/c++/4.6/bits/stl_vector.h ****       { return *(this->_M_impl._M_start + __n); }
 1074              		.loc 2 696 0
 1075 000d 488B45F0 		movq	-16(%rbp), %rax
 1076 0011 488B10   		movq	(%rax), %rdx
 1077 0014 488B45E8 		movq	-24(%rbp), %rax
 1078 0018 48C1E003 		salq	$3, %rax
 1079 001c 488D0CC5 		leaq	0(,%rax,8), %rcx
 1079      00000000 
 1080 0024 4889CB   		movq	%rcx, %rbx
 1081              		.cfi_offset 3, -24
 1082 0027 4829C3   		subq	%rax, %rbx
 1083 002a 4889D8   		movq	%rbx, %rax
 1084 002d 4801D0   		addq	%rdx, %rax
 1085 0030 5B       		popq	%rbx
 1086 0031 5D       		popq	%rbp
 1087              	.LCFI15:
 1088              		.cfi_def_cfa 7, 8
 1089 0032 C3       		ret
 1090              		.cfi_endproc
 1091              	.LFE1470:
 1093              		.section	.text._ZNSt6vectorI5pointSaIS0_EEC2Ev,"axG",@progbits,_ZNSt6vectorI5pointSaIS0_EEC5Ev,com
 1094              		.align 2
 1095              		.weak	_ZNSt6vectorI5pointSaIS0_EEC2Ev
 1097              	_ZNSt6vectorI5pointSaIS0_EEC2Ev:
 1098              	.LFB1481:
 217:/usr/include/c++/4.6/bits/stl_vector.h ****       vector()
 1099              		.loc 2 217 0
 1100              		.cfi_startproc
 1101 0000 55       		pushq	%rbp
 1102              	.LCFI16:
 1103              		.cfi_def_cfa_offset 16
 1104              		.cfi_offset 6, -16
 1105 0001 4889E5   		movq	%rsp, %rbp
 1106              	.LCFI17:
 1107              		.cfi_def_cfa_register 6
 1108 0004 4883EC10 		subq	$16, %rsp
 1109 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1110              	.LBB6:
 218:/usr/include/c++/4.6/bits/stl_vector.h ****       : _Base() { }
 1111              		.loc 2 218 0
 1112 000c 488B45F8 		movq	-8(%rbp), %rax
 1113 0010 4889C7   		movq	%rax, %rdi
 1114 0013 E8000000 		call	_ZNSt12_Vector_baseI5pointSaIS0_EEC2Ev
 1114      00
 1115              	.LBE6:
 1116 0018 C9       		leave
 1117              	.LCFI18:
 1118              		.cfi_def_cfa 7, 8
 1119 0019 C3       		ret
GAS LISTING /tmp/ccJa8FUH.s 			page 42


 1120              		.cfi_endproc
 1121              	.LFE1481:
 1123              		.section	.text._ZNSt6vectorI5pointSaIS0_EED2Ev,"axG",@progbits,_ZNSt6vectorI5pointSaIS0_EED5Ev,com
 1124              		.align 2
 1125              		.weak	_ZNSt6vectorI5pointSaIS0_EED2Ev
 1127              	_ZNSt6vectorI5pointSaIS0_EED2Ev:
 1128              	.LFB1484:
 349:/usr/include/c++/4.6/bits/stl_vector.h ****       ~vector()
 1129              		.loc 2 349 0
 1130              		.cfi_startproc
 1131              		.cfi_personality 0x3,__gxx_personality_v0
 1132              		.cfi_lsda 0x3,.LLSDA1484
 1133 0000 55       		pushq	%rbp
 1134              	.LCFI19:
 1135              		.cfi_def_cfa_offset 16
 1136              		.cfi_offset 6, -16
 1137 0001 4889E5   		movq	%rsp, %rbp
 1138              	.LCFI20:
 1139              		.cfi_def_cfa_register 6
 1140 0004 53       		pushq	%rbx
 1141 0005 4883EC18 		subq	$24, %rsp
 1142 0009 48897DE8 		movq	%rdi, -24(%rbp)
 1143              	.LBB7:
 350:/usr/include/c++/4.6/bits/stl_vector.h ****       { std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 1144              		.loc 2 350 0
 1145 000d 488B45E8 		movq	-24(%rbp), %rax
 1146 0011 4889C7   		movq	%rax, %rdi
 1147              		.cfi_offset 3, -24
 1148 0014 E8000000 		call	_ZNSt12_Vector_baseI5pointSaIS0_EE19_M_get_Tp_allocatorEv
 1148      00
 1149 0019 4889C2   		movq	%rax, %rdx
 1150 001c 488B45E8 		movq	-24(%rbp), %rax
 1151 0020 488B4808 		movq	8(%rax), %rcx
 1152 0024 488B45E8 		movq	-24(%rbp), %rax
 1153 0028 488B00   		movq	(%rax), %rax
 1154 002b 4889CE   		movq	%rcx, %rsi
 1155 002e 4889C7   		movq	%rax, %rdi
 1156              	.LEHB6:
 1157 0031 E8000000 		call	_ZSt8_DestroyIP5pointS0_EvT_S2_RSaIT0_E
 1157      00
 1158              	.LEHE6:
 351:/usr/include/c++/4.6/bits/stl_vector.h **** 		      _M_get_Tp_allocator()); }
 1159              		.loc 2 351 0
 1160 0036 488B45E8 		movq	-24(%rbp), %rax
 1161 003a 4889C7   		movq	%rax, %rdi
 1162              	.LEHB7:
 1163 003d E8000000 		call	_ZNSt12_Vector_baseI5pointSaIS0_EED2Ev
 1163      00
 1164              	.LEHE7:
 1165              	.LBE7:
 1166 0042 4883C418 		addq	$24, %rsp
 1167 0046 5B       		popq	%rbx
 1168 0047 5D       		popq	%rbp
 1169              		.cfi_remember_state
 1170              	.LCFI21:
 1171              		.cfi_def_cfa 7, 8
 1172 0048 C3       		ret
GAS LISTING /tmp/ccJa8FUH.s 			page 43


 1173              	.L46:
 1174              	.LCFI22:
 1175              		.cfi_restore_state
 1176 0049 4889C3   		movq	%rax, %rbx
 1177              	.LBB8:
 1178 004c 488B45E8 		movq	-24(%rbp), %rax
 1179 0050 4889C7   		movq	%rax, %rdi
 1180 0053 E8000000 		call	_ZNSt12_Vector_baseI5pointSaIS0_EED2Ev
 1180      00
 1181 0058 4889D8   		movq	%rbx, %rax
 1182 005b 4889C7   		movq	%rax, %rdi
 1183              	.LEHB8:
 1184 005e E8000000 		call	_Unwind_Resume
 1184      00
 1185              	.LEHE8:
 1186              	.LBE8:
 1187              		.cfi_endproc
 1188              	.LFE1484:
 1189              		.section	.gcc_except_table
 1190              	.LLSDA1484:
 1191 0026 FF       		.byte	0xff
 1192 0027 FF       		.byte	0xff
 1193 0028 01       		.byte	0x1
 1194 0029 0C       		.uleb128 .LLSDACSE1484-.LLSDACSB1484
 1195              	.LLSDACSB1484:
 1196 002a 31       		.uleb128 .LEHB6-.LFB1484
 1197 002b 05       		.uleb128 .LEHE6-.LEHB6
 1198 002c 49       		.uleb128 .L46-.LFB1484
 1199 002d 00       		.uleb128 0
 1200 002e 3D       		.uleb128 .LEHB7-.LFB1484
 1201 002f 05       		.uleb128 .LEHE7-.LEHB7
 1202 0030 00       		.uleb128 0
 1203 0031 00       		.uleb128 0
 1204 0032 5E       		.uleb128 .LEHB8-.LFB1484
 1205 0033 05       		.uleb128 .LEHE8-.LEHB8
 1206 0034 00       		.uleb128 0
 1207 0035 00       		.uleb128 0
 1208              	.LLSDACSE1484:
 1209              		.section	.text._ZNSt6vectorI5pointSaIS0_EED2Ev,"axG",@progbits,_ZNSt6vectorI5pointSaIS0_EED5Ev,com
 1211              		.section	.text._ZNSt12_Vector_baseI5pointSaIS0_EE12_Vector_implD2Ev,"axG",@progbits,_ZNSt12_Vector
 1212              		.align 2
 1213              		.weak	_ZNSt12_Vector_baseI5pointSaIS0_EE12_Vector_implD2Ev
 1215              	_ZNSt12_Vector_baseI5pointSaIS0_EE12_Vector_implD2Ev:
 1216              	.LFB1507:
  75:/usr/include/c++/4.6/bits/stl_vector.h ****       struct _Vector_impl 
 1217              		.loc 2 75 0
 1218              		.cfi_startproc
 1219 0000 55       		pushq	%rbp
 1220              	.LCFI23:
 1221              		.cfi_def_cfa_offset 16
 1222              		.cfi_offset 6, -16
 1223 0001 4889E5   		movq	%rsp, %rbp
 1224              	.LCFI24:
 1225              		.cfi_def_cfa_register 6
 1226 0004 4883EC10 		subq	$16, %rsp
 1227 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1228              	.LBB9:
GAS LISTING /tmp/ccJa8FUH.s 			page 44


  75:/usr/include/c++/4.6/bits/stl_vector.h ****       struct _Vector_impl 
 1229              		.loc 2 75 0
 1230 000c 488B45F8 		movq	-8(%rbp), %rax
 1231 0010 4889C7   		movq	%rax, %rdi
 1232 0013 E8000000 		call	_ZNSaI5pointED2Ev
 1232      00
 1233              	.LBE9:
 1234 0018 C9       		leave
 1235              	.LCFI25:
 1236              		.cfi_def_cfa 7, 8
 1237 0019 C3       		ret
 1238              		.cfi_endproc
 1239              	.LFE1507:
 1241              		.section	.text._ZNSt12_Vector_baseI5pointSaIS0_EEC2Ev,"axG",@progbits,_ZNSt12_Vector_baseI5pointSa
 1242              		.align 2
 1243              		.weak	_ZNSt12_Vector_baseI5pointSaIS0_EEC2Ev
 1245              	_ZNSt12_Vector_baseI5pointSaIS0_EEC2Ev:
 1246              	.LFB1509:
 106:/usr/include/c++/4.6/bits/stl_vector.h ****       _Vector_base()
 1247              		.loc 2 106 0
 1248              		.cfi_startproc
 1249 0000 55       		pushq	%rbp
 1250              	.LCFI26:
 1251              		.cfi_def_cfa_offset 16
 1252              		.cfi_offset 6, -16
 1253 0001 4889E5   		movq	%rsp, %rbp
 1254              	.LCFI27:
 1255              		.cfi_def_cfa_register 6
 1256 0004 4883EC10 		subq	$16, %rsp
 1257 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1258              	.LBB10:
 107:/usr/include/c++/4.6/bits/stl_vector.h ****       : _M_impl() { }
 1259              		.loc 2 107 0
 1260 000c 488B45F8 		movq	-8(%rbp), %rax
 1261 0010 4889C7   		movq	%rax, %rdi
 1262 0013 E8000000 		call	_ZNSt12_Vector_baseI5pointSaIS0_EE12_Vector_implC1Ev
 1262      00
 1263              	.LBE10:
 1264 0018 C9       		leave
 1265              	.LCFI28:
 1266              		.cfi_def_cfa 7, 8
 1267 0019 C3       		ret
 1268              		.cfi_endproc
 1269              	.LFE1509:
 1271              		.section	.text._ZNSt12_Vector_baseI5pointSaIS0_EED2Ev,"axG",@progbits,_ZNSt12_Vector_baseI5pointSa
 1272              		.align 2
 1273              		.weak	_ZNSt12_Vector_baseI5pointSaIS0_EED2Ev
 1275              	_ZNSt12_Vector_baseI5pointSaIS0_EED2Ev:
 1276              	.LFB1512:
 141:/usr/include/c++/4.6/bits/stl_vector.h ****       ~_Vector_base()
 1277              		.loc 2 141 0
 1278              		.cfi_startproc
 1279              		.cfi_personality 0x3,__gxx_personality_v0
 1280              		.cfi_lsda 0x3,.LLSDA1512
 1281 0000 55       		pushq	%rbp
 1282              	.LCFI29:
 1283              		.cfi_def_cfa_offset 16
GAS LISTING /tmp/ccJa8FUH.s 			page 45


 1284              		.cfi_offset 6, -16
 1285 0001 4889E5   		movq	%rsp, %rbp
 1286              	.LCFI30:
 1287              		.cfi_def_cfa_register 6
 1288 0004 53       		pushq	%rbx
 1289 0005 4883EC18 		subq	$24, %rsp
 1290 0009 48897DE8 		movq	%rdi, -24(%rbp)
 1291              	.LBB11:
 142:/usr/include/c++/4.6/bits/stl_vector.h ****       { _M_deallocate(this->_M_impl._M_start, this->_M_impl._M_end_of_storage
 1292              		.loc 2 142 0
 1293 000d 488B45E8 		movq	-24(%rbp), %rax
 1294 0011 488B4010 		movq	16(%rax), %rax
 1295 0015 4889C2   		movq	%rax, %rdx
 1296 0018 488B45E8 		movq	-24(%rbp), %rax
 1297 001c 488B00   		movq	(%rax), %rax
 1298 001f 4889D1   		movq	%rdx, %rcx
 1299 0022 4829C1   		subq	%rax, %rcx
 1300 0025 4889C8   		movq	%rcx, %rax
 1301 0028 4889C2   		movq	%rax, %rdx
 1302 002b 48C1FA03 		sarq	$3, %rdx
 1303 002f 48B8B76D 		movabsq	$7905747460161236407, %rax
 1303      DBB66DDB 
 1303      B66D
 1304 0039 480FAFC2 		imulq	%rdx, %rax
 1305 003d 4889C2   		movq	%rax, %rdx
 1306 0040 488B45E8 		movq	-24(%rbp), %rax
 1307 0044 488B08   		movq	(%rax), %rcx
 1308 0047 488B45E8 		movq	-24(%rbp), %rax
 1309 004b 4889CE   		movq	%rcx, %rsi
 1310 004e 4889C7   		movq	%rax, %rdi
 1311              	.LEHB9:
 1312              		.cfi_offset 3, -24
 1313 0051 E8000000 		call	_ZNSt12_Vector_baseI5pointSaIS0_EE13_M_deallocateEPS0_m
 1313      00
 1314              	.LEHE9:
 143:/usr/include/c++/4.6/bits/stl_vector.h **** 		      - this->_M_impl._M_start); }
 1315              		.loc 2 143 0
 1316 0056 488B45E8 		movq	-24(%rbp), %rax
 1317 005a 4889C7   		movq	%rax, %rdi
 1318 005d E8000000 		call	_ZNSt12_Vector_baseI5pointSaIS0_EE12_Vector_implD1Ev
 1318      00
 1319              	.LBE11:
 1320 0062 4883C418 		addq	$24, %rsp
 1321 0066 5B       		popq	%rbx
 1322 0067 5D       		popq	%rbp
 1323              		.cfi_remember_state
 1324              	.LCFI31:
 1325              		.cfi_def_cfa 7, 8
 1326 0068 C3       		ret
 1327              	.L53:
 1328              	.LCFI32:
 1329              		.cfi_restore_state
 1330 0069 4889C3   		movq	%rax, %rbx
 1331              	.LBB12:
 1332 006c 488B45E8 		movq	-24(%rbp), %rax
 1333 0070 4889C7   		movq	%rax, %rdi
 1334 0073 E8000000 		call	_ZNSt12_Vector_baseI5pointSaIS0_EE12_Vector_implD1Ev
GAS LISTING /tmp/ccJa8FUH.s 			page 46


 1334      00
 1335 0078 4889D8   		movq	%rbx, %rax
 1336 007b 4889C7   		movq	%rax, %rdi
 1337              	.LEHB10:
 1338 007e E8000000 		call	_Unwind_Resume
 1338      00
 1339              	.LEHE10:
 1340              	.LBE12:
 1341              		.cfi_endproc
 1342              	.LFE1512:
 1343              		.section	.gcc_except_table
 1344              	.LLSDA1512:
 1345 0036 FF       		.byte	0xff
 1346 0037 FF       		.byte	0xff
 1347 0038 01       		.byte	0x1
 1348 0039 08       		.uleb128 .LLSDACSE1512-.LLSDACSB1512
 1349              	.LLSDACSB1512:
 1350 003a 51       		.uleb128 .LEHB9-.LFB1512
 1351 003b 05       		.uleb128 .LEHE9-.LEHB9
 1352 003c 69       		.uleb128 .L53-.LFB1512
 1353 003d 00       		.uleb128 0
 1354 003e 7E       		.uleb128 .LEHB10-.LFB1512
 1355 003f 05       		.uleb128 .LEHE10-.LEHB10
 1356 0040 00       		.uleb128 0
 1357 0041 00       		.uleb128 0
 1358              	.LLSDACSE1512:
 1359              		.section	.text._ZNSt12_Vector_baseI5pointSaIS0_EED2Ev,"axG",@progbits,_ZNSt12_Vector_baseI5pointSa
 1361              		.section	.text._ZNSt12_Vector_baseI5pointSaIS0_EE19_M_get_Tp_allocatorEv,"axG",@progbits,_ZNSt12_V
 1362              		.align 2
 1363              		.weak	_ZNSt12_Vector_baseI5pointSaIS0_EE19_M_get_Tp_allocatorEv
 1365              	_ZNSt12_Vector_baseI5pointSaIS0_EE19_M_get_Tp_allocatorEv:
 1366              	.LFB1514:
  95:/usr/include/c++/4.6/bits/stl_vector.h ****       _M_get_Tp_allocator()
 1367              		.loc 2 95 0
 1368              		.cfi_startproc
 1369 0000 55       		pushq	%rbp
 1370              	.LCFI33:
 1371              		.cfi_def_cfa_offset 16
 1372              		.cfi_offset 6, -16
 1373 0001 4889E5   		movq	%rsp, %rbp
 1374              	.LCFI34:
 1375              		.cfi_def_cfa_register 6
 1376 0004 48897DF8 		movq	%rdi, -8(%rbp)
  96:/usr/include/c++/4.6/bits/stl_vector.h ****       { return *static_cast<_Tp_alloc_type*>(&this->_M_impl); }
 1377              		.loc 2 96 0
 1378 0008 488B45F8 		movq	-8(%rbp), %rax
 1379 000c 5D       		popq	%rbp
 1380              	.LCFI35:
 1381              		.cfi_def_cfa 7, 8
 1382 000d C3       		ret
 1383              		.cfi_endproc
 1384              	.LFE1514:
 1386              		.section	.text._ZSt8_DestroyIP5pointS0_EvT_S2_RSaIT0_E,"axG",@progbits,_ZSt8_DestroyIP5pointS0_EvT
 1387              		.weak	_ZSt8_DestroyIP5pointS0_EvT_S2_RSaIT0_E
 1389              	_ZSt8_DestroyIP5pointS0_EvT_S2_RSaIT0_E:
 1390              	.LFB1515:
 1391              		.file 3 "/usr/include/c++/4.6/bits/stl_construct.h"
GAS LISTING /tmp/ccJa8FUH.s 			page 47


   1:/usr/include/c++/4.6/bits/stl_construct.h **** // nonstandard construct and destroy functions -*- C++ -*-
   2:/usr/include/c++/4.6/bits/stl_construct.h **** 
   3:/usr/include/c++/4.6/bits/stl_construct.h **** // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008,
   4:/usr/include/c++/4.6/bits/stl_construct.h **** // 2009, 2010
   5:/usr/include/c++/4.6/bits/stl_construct.h **** // Free Software Foundation, Inc.
   6:/usr/include/c++/4.6/bits/stl_construct.h **** //
   7:/usr/include/c++/4.6/bits/stl_construct.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   8:/usr/include/c++/4.6/bits/stl_construct.h **** // software; you can redistribute it and/or modify it under the
   9:/usr/include/c++/4.6/bits/stl_construct.h **** // terms of the GNU General Public License as published by the
  10:/usr/include/c++/4.6/bits/stl_construct.h **** // Free Software Foundation; either version 3, or (at your option)
  11:/usr/include/c++/4.6/bits/stl_construct.h **** // any later version.
  12:/usr/include/c++/4.6/bits/stl_construct.h **** 
  13:/usr/include/c++/4.6/bits/stl_construct.h **** // This library is distributed in the hope that it will be useful,
  14:/usr/include/c++/4.6/bits/stl_construct.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  15:/usr/include/c++/4.6/bits/stl_construct.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  16:/usr/include/c++/4.6/bits/stl_construct.h **** // GNU General Public License for more details.
  17:/usr/include/c++/4.6/bits/stl_construct.h **** 
  18:/usr/include/c++/4.6/bits/stl_construct.h **** // Under Section 7 of GPL version 3, you are granted additional
  19:/usr/include/c++/4.6/bits/stl_construct.h **** // permissions described in the GCC Runtime Library Exception, version
  20:/usr/include/c++/4.6/bits/stl_construct.h **** // 3.1, as published by the Free Software Foundation.
  21:/usr/include/c++/4.6/bits/stl_construct.h **** 
  22:/usr/include/c++/4.6/bits/stl_construct.h **** // You should have received a copy of the GNU General Public License and
  23:/usr/include/c++/4.6/bits/stl_construct.h **** // a copy of the GCC Runtime Library Exception along with this program;
  24:/usr/include/c++/4.6/bits/stl_construct.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  25:/usr/include/c++/4.6/bits/stl_construct.h **** // <http://www.gnu.org/licenses/>.
  26:/usr/include/c++/4.6/bits/stl_construct.h **** 
  27:/usr/include/c++/4.6/bits/stl_construct.h **** /*
  28:/usr/include/c++/4.6/bits/stl_construct.h ****  *
  29:/usr/include/c++/4.6/bits/stl_construct.h ****  * Copyright (c) 1994
  30:/usr/include/c++/4.6/bits/stl_construct.h ****  * Hewlett-Packard Company
  31:/usr/include/c++/4.6/bits/stl_construct.h ****  *
  32:/usr/include/c++/4.6/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  33:/usr/include/c++/4.6/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  34:/usr/include/c++/4.6/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  35:/usr/include/c++/4.6/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  36:/usr/include/c++/4.6/bits/stl_construct.h ****  * in supporting documentation.  Hewlett-Packard Company makes no
  37:/usr/include/c++/4.6/bits/stl_construct.h ****  * representations about the suitability of this software for any
  38:/usr/include/c++/4.6/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  39:/usr/include/c++/4.6/bits/stl_construct.h ****  *
  40:/usr/include/c++/4.6/bits/stl_construct.h ****  *
  41:/usr/include/c++/4.6/bits/stl_construct.h ****  * Copyright (c) 1996,1997
  42:/usr/include/c++/4.6/bits/stl_construct.h ****  * Silicon Graphics Computer Systems, Inc.
  43:/usr/include/c++/4.6/bits/stl_construct.h ****  *
  44:/usr/include/c++/4.6/bits/stl_construct.h ****  * Permission to use, copy, modify, distribute and sell this software
  45:/usr/include/c++/4.6/bits/stl_construct.h ****  * and its documentation for any purpose is hereby granted without fee,
  46:/usr/include/c++/4.6/bits/stl_construct.h ****  * provided that the above copyright notice appear in all copies and
  47:/usr/include/c++/4.6/bits/stl_construct.h ****  * that both that copyright notice and this permission notice appear
  48:/usr/include/c++/4.6/bits/stl_construct.h ****  * in supporting documentation.  Silicon Graphics makes no
  49:/usr/include/c++/4.6/bits/stl_construct.h ****  * representations about the suitability of this software for any
  50:/usr/include/c++/4.6/bits/stl_construct.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  51:/usr/include/c++/4.6/bits/stl_construct.h ****  */
  52:/usr/include/c++/4.6/bits/stl_construct.h **** 
  53:/usr/include/c++/4.6/bits/stl_construct.h **** /** @file bits/stl_construct.h
  54:/usr/include/c++/4.6/bits/stl_construct.h ****  *  This is an internal header file, included by other library headers.
  55:/usr/include/c++/4.6/bits/stl_construct.h ****  *  Do not attempt to use it directly. @headername{memory}
  56:/usr/include/c++/4.6/bits/stl_construct.h ****  */
  57:/usr/include/c++/4.6/bits/stl_construct.h **** 
GAS LISTING /tmp/ccJa8FUH.s 			page 48


  58:/usr/include/c++/4.6/bits/stl_construct.h **** #ifndef _STL_CONSTRUCT_H
  59:/usr/include/c++/4.6/bits/stl_construct.h **** #define _STL_CONSTRUCT_H 1
  60:/usr/include/c++/4.6/bits/stl_construct.h **** 
  61:/usr/include/c++/4.6/bits/stl_construct.h **** #include <new>
  62:/usr/include/c++/4.6/bits/stl_construct.h **** #include <bits/move.h>
  63:/usr/include/c++/4.6/bits/stl_construct.h **** 
  64:/usr/include/c++/4.6/bits/stl_construct.h **** namespace std _GLIBCXX_VISIBILITY(default)
  65:/usr/include/c++/4.6/bits/stl_construct.h **** {
  66:/usr/include/c++/4.6/bits/stl_construct.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  67:/usr/include/c++/4.6/bits/stl_construct.h **** 
  68:/usr/include/c++/4.6/bits/stl_construct.h ****   /**
  69:/usr/include/c++/4.6/bits/stl_construct.h ****    * Constructs an object in existing memory by invoking an allocated
  70:/usr/include/c++/4.6/bits/stl_construct.h ****    * object's constructor with an initializer.
  71:/usr/include/c++/4.6/bits/stl_construct.h ****    */
  72:/usr/include/c++/4.6/bits/stl_construct.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
  73:/usr/include/c++/4.6/bits/stl_construct.h ****   template<typename _T1, typename... _Args>
  74:/usr/include/c++/4.6/bits/stl_construct.h ****     inline void
  75:/usr/include/c++/4.6/bits/stl_construct.h ****     _Construct(_T1* __p, _Args&&... __args)
  76:/usr/include/c++/4.6/bits/stl_construct.h ****     { ::new(static_cast<void*>(__p)) _T1(std::forward<_Args>(__args)...); }
  77:/usr/include/c++/4.6/bits/stl_construct.h **** #else
  78:/usr/include/c++/4.6/bits/stl_construct.h ****   template<typename _T1, typename _T2>
  79:/usr/include/c++/4.6/bits/stl_construct.h ****     inline void
  80:/usr/include/c++/4.6/bits/stl_construct.h ****     _Construct(_T1* __p, const _T2& __value)
  81:/usr/include/c++/4.6/bits/stl_construct.h ****     {
  82:/usr/include/c++/4.6/bits/stl_construct.h ****       // _GLIBCXX_RESOLVE_LIB_DEFECTS
  83:/usr/include/c++/4.6/bits/stl_construct.h ****       // 402. wrong new expression in [some_]allocator::construct
  84:/usr/include/c++/4.6/bits/stl_construct.h ****       ::new(static_cast<void*>(__p)) _T1(__value);
  85:/usr/include/c++/4.6/bits/stl_construct.h ****     }
  86:/usr/include/c++/4.6/bits/stl_construct.h **** #endif
  87:/usr/include/c++/4.6/bits/stl_construct.h **** 
  88:/usr/include/c++/4.6/bits/stl_construct.h ****   /**
  89:/usr/include/c++/4.6/bits/stl_construct.h ****    * Destroy the object pointed to by a pointer type.
  90:/usr/include/c++/4.6/bits/stl_construct.h ****    */
  91:/usr/include/c++/4.6/bits/stl_construct.h ****   template<typename _Tp>
  92:/usr/include/c++/4.6/bits/stl_construct.h ****     inline void
  93:/usr/include/c++/4.6/bits/stl_construct.h ****     _Destroy(_Tp* __pointer)
  94:/usr/include/c++/4.6/bits/stl_construct.h ****     { __pointer->~_Tp(); }
  95:/usr/include/c++/4.6/bits/stl_construct.h **** 
  96:/usr/include/c++/4.6/bits/stl_construct.h ****   template<bool>
  97:/usr/include/c++/4.6/bits/stl_construct.h ****     struct _Destroy_aux
  98:/usr/include/c++/4.6/bits/stl_construct.h ****     {
  99:/usr/include/c++/4.6/bits/stl_construct.h ****       template<typename _ForwardIterator>
 100:/usr/include/c++/4.6/bits/stl_construct.h ****         static void
 101:/usr/include/c++/4.6/bits/stl_construct.h ****         __destroy(_ForwardIterator __first, _ForwardIterator __last)
 102:/usr/include/c++/4.6/bits/stl_construct.h **** 	{
 103:/usr/include/c++/4.6/bits/stl_construct.h **** 	  for (; __first != __last; ++__first)
 104:/usr/include/c++/4.6/bits/stl_construct.h **** 	    std::_Destroy(std::__addressof(*__first));
 105:/usr/include/c++/4.6/bits/stl_construct.h **** 	}
 106:/usr/include/c++/4.6/bits/stl_construct.h ****     };
 107:/usr/include/c++/4.6/bits/stl_construct.h **** 
 108:/usr/include/c++/4.6/bits/stl_construct.h ****   template<>
 109:/usr/include/c++/4.6/bits/stl_construct.h ****     struct _Destroy_aux<true>
 110:/usr/include/c++/4.6/bits/stl_construct.h ****     {
 111:/usr/include/c++/4.6/bits/stl_construct.h ****       template<typename _ForwardIterator>
 112:/usr/include/c++/4.6/bits/stl_construct.h ****         static void
 113:/usr/include/c++/4.6/bits/stl_construct.h ****         __destroy(_ForwardIterator, _ForwardIterator) { }
 114:/usr/include/c++/4.6/bits/stl_construct.h ****     };
GAS LISTING /tmp/ccJa8FUH.s 			page 49


 115:/usr/include/c++/4.6/bits/stl_construct.h **** 
 116:/usr/include/c++/4.6/bits/stl_construct.h ****   /**
 117:/usr/include/c++/4.6/bits/stl_construct.h ****    * Destroy a range of objects.  If the value_type of the object has
 118:/usr/include/c++/4.6/bits/stl_construct.h ****    * a trivial destructor, the compiler should optimize all of this
 119:/usr/include/c++/4.6/bits/stl_construct.h ****    * away, otherwise the objects' destructors must be invoked.
 120:/usr/include/c++/4.6/bits/stl_construct.h ****    */
 121:/usr/include/c++/4.6/bits/stl_construct.h ****   template<typename _ForwardIterator>
 122:/usr/include/c++/4.6/bits/stl_construct.h ****     inline void
 123:/usr/include/c++/4.6/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 124:/usr/include/c++/4.6/bits/stl_construct.h ****     {
 125:/usr/include/c++/4.6/bits/stl_construct.h ****       typedef typename iterator_traits<_ForwardIterator>::value_type
 126:/usr/include/c++/4.6/bits/stl_construct.h ****                        _Value_type;
 127:/usr/include/c++/4.6/bits/stl_construct.h ****       std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 128:/usr/include/c++/4.6/bits/stl_construct.h **** 	__destroy(__first, __last);
 129:/usr/include/c++/4.6/bits/stl_construct.h ****     }
 130:/usr/include/c++/4.6/bits/stl_construct.h **** 
 131:/usr/include/c++/4.6/bits/stl_construct.h ****   /**
 132:/usr/include/c++/4.6/bits/stl_construct.h ****    * Destroy a range of objects using the supplied allocator.  For
 133:/usr/include/c++/4.6/bits/stl_construct.h ****    * nondefault allocators we do not optimize away invocation of 
 134:/usr/include/c++/4.6/bits/stl_construct.h ****    * destroy() even if _Tp has a trivial destructor.
 135:/usr/include/c++/4.6/bits/stl_construct.h ****    */
 136:/usr/include/c++/4.6/bits/stl_construct.h **** 
 137:/usr/include/c++/4.6/bits/stl_construct.h ****   template <typename _Tp> class allocator;
 138:/usr/include/c++/4.6/bits/stl_construct.h **** 
 139:/usr/include/c++/4.6/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Allocator>
 140:/usr/include/c++/4.6/bits/stl_construct.h ****     void
 141:/usr/include/c++/4.6/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 142:/usr/include/c++/4.6/bits/stl_construct.h **** 	     _Allocator& __alloc)
 143:/usr/include/c++/4.6/bits/stl_construct.h ****     {
 144:/usr/include/c++/4.6/bits/stl_construct.h ****       for (; __first != __last; ++__first)
 145:/usr/include/c++/4.6/bits/stl_construct.h **** 	__alloc.destroy(std::__addressof(*__first));
 146:/usr/include/c++/4.6/bits/stl_construct.h ****     }
 147:/usr/include/c++/4.6/bits/stl_construct.h **** 
 148:/usr/include/c++/4.6/bits/stl_construct.h ****   template<typename _ForwardIterator, typename _Tp>
 149:/usr/include/c++/4.6/bits/stl_construct.h ****     inline void
 150:/usr/include/c++/4.6/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 1392              		.loc 3 150 0
 1393              		.cfi_startproc
 1394 0000 55       		pushq	%rbp
 1395              	.LCFI36:
 1396              		.cfi_def_cfa_offset 16
 1397              		.cfi_offset 6, -16
 1398 0001 4889E5   		movq	%rsp, %rbp
 1399              	.LCFI37:
 1400              		.cfi_def_cfa_register 6
 1401 0004 4883EC20 		subq	$32, %rsp
 1402 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1403 000c 488975F0 		movq	%rsi, -16(%rbp)
 1404 0010 488955E8 		movq	%rdx, -24(%rbp)
 151:/usr/include/c++/4.6/bits/stl_construct.h **** 	     allocator<_Tp>&)
 152:/usr/include/c++/4.6/bits/stl_construct.h ****     {
 153:/usr/include/c++/4.6/bits/stl_construct.h ****       _Destroy(__first, __last);
 1405              		.loc 3 153 0
 1406 0014 488B55F0 		movq	-16(%rbp), %rdx
 1407 0018 488B45F8 		movq	-8(%rbp), %rax
 1408 001c 4889D6   		movq	%rdx, %rsi
 1409 001f 4889C7   		movq	%rax, %rdi
GAS LISTING /tmp/ccJa8FUH.s 			page 50


 1410 0022 E8000000 		call	_ZSt8_DestroyIP5pointEvT_S2_
 1410      00
 154:/usr/include/c++/4.6/bits/stl_construct.h ****     }
 1411              		.loc 3 154 0
 1412 0027 C9       		leave
 1413              	.LCFI38:
 1414              		.cfi_def_cfa 7, 8
 1415 0028 C3       		ret
 1416              		.cfi_endproc
 1417              	.LFE1515:
 1419              		.section	.text._ZNSt12_Vector_baseI5pointSaIS0_EE12_Vector_implC2Ev,"axG",@progbits,_ZNSt12_Vector
 1420              		.align 2
 1421              		.weak	_ZNSt12_Vector_baseI5pointSaIS0_EE12_Vector_implC2Ev
 1423              	_ZNSt12_Vector_baseI5pointSaIS0_EE12_Vector_implC2Ev:
 1424              	.LFB1532:
  82:/usr/include/c++/4.6/bits/stl_vector.h **** 	_Vector_impl()
 1425              		.loc 2 82 0
 1426              		.cfi_startproc
 1427 0000 55       		pushq	%rbp
 1428              	.LCFI39:
 1429              		.cfi_def_cfa_offset 16
 1430              		.cfi_offset 6, -16
 1431 0001 4889E5   		movq	%rsp, %rbp
 1432              	.LCFI40:
 1433              		.cfi_def_cfa_register 6
 1434 0004 4883EC10 		subq	$16, %rsp
 1435 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1436              	.LBB13:
  83:/usr/include/c++/4.6/bits/stl_vector.h **** 	: _Tp_alloc_type(), _M_start(0), _M_finish(0), _M_end_of_storage(0)
 1437              		.loc 2 83 0
 1438 000c 488B45F8 		movq	-8(%rbp), %rax
 1439 0010 4889C7   		movq	%rax, %rdi
 1440 0013 E8000000 		call	_ZNSaI5pointEC2Ev
 1440      00
 1441 0018 488B45F8 		movq	-8(%rbp), %rax
 1442 001c 48C70000 		movq	$0, (%rax)
 1442      000000
 1443 0023 488B45F8 		movq	-8(%rbp), %rax
 1444 0027 48C74008 		movq	$0, 8(%rax)
 1444      00000000 
 1445 002f 488B45F8 		movq	-8(%rbp), %rax
 1446 0033 48C74010 		movq	$0, 16(%rax)
 1446      00000000 
 1447              	.LBE13:
  84:/usr/include/c++/4.6/bits/stl_vector.h **** 	{ }
 1448              		.loc 2 84 0
 1449 003b C9       		leave
 1450              	.LCFI41:
 1451              		.cfi_def_cfa 7, 8
 1452 003c C3       		ret
 1453              		.cfi_endproc
 1454              	.LFE1532:
 1456              		.section	.text._ZNSaI5pointED2Ev,"axG",@progbits,_ZNSaI5pointED5Ev,comdat
 1457              		.align 2
 1458              		.weak	_ZNSaI5pointED2Ev
 1460              	_ZNSaI5pointED2Ev:
 1461              	.LFB1535:
GAS LISTING /tmp/ccJa8FUH.s 			page 51


 1462              		.file 4 "/usr/include/c++/4.6/bits/allocator.h"
   1:/usr/include/c++/4.6/bits/allocator.h **** // Allocators -*- C++ -*-
   2:/usr/include/c++/4.6/bits/allocator.h **** 
   3:/usr/include/c++/4.6/bits/allocator.h **** // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010,
   4:/usr/include/c++/4.6/bits/allocator.h **** // 2011 Free Software Foundation, Inc.
   5:/usr/include/c++/4.6/bits/allocator.h **** //
   6:/usr/include/c++/4.6/bits/allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   7:/usr/include/c++/4.6/bits/allocator.h **** // software; you can redistribute it and/or modify it under the
   8:/usr/include/c++/4.6/bits/allocator.h **** // terms of the GNU General Public License as published by the
   9:/usr/include/c++/4.6/bits/allocator.h **** // Free Software Foundation; either version 3, or (at your option)
  10:/usr/include/c++/4.6/bits/allocator.h **** // any later version.
  11:/usr/include/c++/4.6/bits/allocator.h **** 
  12:/usr/include/c++/4.6/bits/allocator.h **** // This library is distributed in the hope that it will be useful,
  13:/usr/include/c++/4.6/bits/allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/usr/include/c++/4.6/bits/allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/usr/include/c++/4.6/bits/allocator.h **** // GNU General Public License for more details.
  16:/usr/include/c++/4.6/bits/allocator.h **** 
  17:/usr/include/c++/4.6/bits/allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  18:/usr/include/c++/4.6/bits/allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  19:/usr/include/c++/4.6/bits/allocator.h **** // 3.1, as published by the Free Software Foundation.
  20:/usr/include/c++/4.6/bits/allocator.h **** 
  21:/usr/include/c++/4.6/bits/allocator.h **** // You should have received a copy of the GNU General Public License and
  22:/usr/include/c++/4.6/bits/allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/usr/include/c++/4.6/bits/allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/usr/include/c++/4.6/bits/allocator.h **** // <http://www.gnu.org/licenses/>.
  25:/usr/include/c++/4.6/bits/allocator.h **** 
  26:/usr/include/c++/4.6/bits/allocator.h **** /*
  27:/usr/include/c++/4.6/bits/allocator.h ****  * Copyright (c) 1996-1997
  28:/usr/include/c++/4.6/bits/allocator.h ****  * Silicon Graphics Computer Systems, Inc.
  29:/usr/include/c++/4.6/bits/allocator.h ****  *
  30:/usr/include/c++/4.6/bits/allocator.h ****  * Permission to use, copy, modify, distribute and sell this software
  31:/usr/include/c++/4.6/bits/allocator.h ****  * and its documentation for any purpose is hereby granted without fee,
  32:/usr/include/c++/4.6/bits/allocator.h ****  * provided that the above copyright notice appear in all copies and
  33:/usr/include/c++/4.6/bits/allocator.h ****  * that both that copyright notice and this permission notice appear
  34:/usr/include/c++/4.6/bits/allocator.h ****  * in supporting documentation.  Silicon Graphics makes no
  35:/usr/include/c++/4.6/bits/allocator.h ****  * representations about the suitability of this software for any
  36:/usr/include/c++/4.6/bits/allocator.h ****  * purpose.  It is provided "as is" without express or implied warranty.
  37:/usr/include/c++/4.6/bits/allocator.h ****  */
  38:/usr/include/c++/4.6/bits/allocator.h **** 
  39:/usr/include/c++/4.6/bits/allocator.h **** /** @file bits/allocator.h
  40:/usr/include/c++/4.6/bits/allocator.h ****  *  This is an internal header file, included by other library headers.
  41:/usr/include/c++/4.6/bits/allocator.h ****  *  Do not attempt to use it directly. @headername{memory}
  42:/usr/include/c++/4.6/bits/allocator.h ****  */
  43:/usr/include/c++/4.6/bits/allocator.h **** 
  44:/usr/include/c++/4.6/bits/allocator.h **** #ifndef _ALLOCATOR_H
  45:/usr/include/c++/4.6/bits/allocator.h **** #define _ALLOCATOR_H 1
  46:/usr/include/c++/4.6/bits/allocator.h **** 
  47:/usr/include/c++/4.6/bits/allocator.h **** // Define the base class to std::allocator.
  48:/usr/include/c++/4.6/bits/allocator.h **** #include <bits/c++allocator.h>
  49:/usr/include/c++/4.6/bits/allocator.h **** 
  50:/usr/include/c++/4.6/bits/allocator.h **** #ifdef __GXX_EXPERIMENTAL_CXX0X__
  51:/usr/include/c++/4.6/bits/allocator.h **** #include <type_traits> // For _GLIBCXX_HAS_NESTED_TYPE
  52:/usr/include/c++/4.6/bits/allocator.h **** #endif
  53:/usr/include/c++/4.6/bits/allocator.h **** 
  54:/usr/include/c++/4.6/bits/allocator.h **** namespace std _GLIBCXX_VISIBILITY(default)
  55:/usr/include/c++/4.6/bits/allocator.h **** {
  56:/usr/include/c++/4.6/bits/allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
GAS LISTING /tmp/ccJa8FUH.s 			page 52


  57:/usr/include/c++/4.6/bits/allocator.h **** 
  58:/usr/include/c++/4.6/bits/allocator.h ****   /**
  59:/usr/include/c++/4.6/bits/allocator.h ****    * @defgroup allocators Allocators
  60:/usr/include/c++/4.6/bits/allocator.h ****    * @ingroup memory
  61:/usr/include/c++/4.6/bits/allocator.h ****    *
  62:/usr/include/c++/4.6/bits/allocator.h ****    * Classes encapsulating memory operations.
  63:/usr/include/c++/4.6/bits/allocator.h ****    */
  64:/usr/include/c++/4.6/bits/allocator.h **** 
  65:/usr/include/c++/4.6/bits/allocator.h ****   template<typename _Tp>
  66:/usr/include/c++/4.6/bits/allocator.h ****     class allocator;
  67:/usr/include/c++/4.6/bits/allocator.h **** 
  68:/usr/include/c++/4.6/bits/allocator.h ****   /// allocator<void> specialization.
  69:/usr/include/c++/4.6/bits/allocator.h ****   template<>
  70:/usr/include/c++/4.6/bits/allocator.h ****     class allocator<void>
  71:/usr/include/c++/4.6/bits/allocator.h ****     {
  72:/usr/include/c++/4.6/bits/allocator.h ****     public:
  73:/usr/include/c++/4.6/bits/allocator.h ****       typedef size_t      size_type;
  74:/usr/include/c++/4.6/bits/allocator.h ****       typedef ptrdiff_t   difference_type;
  75:/usr/include/c++/4.6/bits/allocator.h ****       typedef void*       pointer;
  76:/usr/include/c++/4.6/bits/allocator.h ****       typedef const void* const_pointer;
  77:/usr/include/c++/4.6/bits/allocator.h ****       typedef void        value_type;
  78:/usr/include/c++/4.6/bits/allocator.h **** 
  79:/usr/include/c++/4.6/bits/allocator.h ****       template<typename _Tp1>
  80:/usr/include/c++/4.6/bits/allocator.h ****         struct rebind
  81:/usr/include/c++/4.6/bits/allocator.h ****         { typedef allocator<_Tp1> other; };
  82:/usr/include/c++/4.6/bits/allocator.h ****     };
  83:/usr/include/c++/4.6/bits/allocator.h **** 
  84:/usr/include/c++/4.6/bits/allocator.h ****   /**
  85:/usr/include/c++/4.6/bits/allocator.h ****    * @brief  The @a standard allocator, as per [20.4].
  86:/usr/include/c++/4.6/bits/allocator.h ****    * @ingroup allocators
  87:/usr/include/c++/4.6/bits/allocator.h ****    *
  88:/usr/include/c++/4.6/bits/allocator.h ****    *  Further details:
  89:/usr/include/c++/4.6/bits/allocator.h ****    *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt04ch11.html
  90:/usr/include/c++/4.6/bits/allocator.h ****    */
  91:/usr/include/c++/4.6/bits/allocator.h ****   template<typename _Tp>
  92:/usr/include/c++/4.6/bits/allocator.h ****     class allocator: public __glibcxx_base_allocator<_Tp>
  93:/usr/include/c++/4.6/bits/allocator.h ****     {
  94:/usr/include/c++/4.6/bits/allocator.h ****    public:
  95:/usr/include/c++/4.6/bits/allocator.h ****       typedef size_t     size_type;
  96:/usr/include/c++/4.6/bits/allocator.h ****       typedef ptrdiff_t  difference_type;
  97:/usr/include/c++/4.6/bits/allocator.h ****       typedef _Tp*       pointer;
  98:/usr/include/c++/4.6/bits/allocator.h ****       typedef const _Tp* const_pointer;
  99:/usr/include/c++/4.6/bits/allocator.h ****       typedef _Tp&       reference;
 100:/usr/include/c++/4.6/bits/allocator.h ****       typedef const _Tp& const_reference;
 101:/usr/include/c++/4.6/bits/allocator.h ****       typedef _Tp        value_type;
 102:/usr/include/c++/4.6/bits/allocator.h **** 
 103:/usr/include/c++/4.6/bits/allocator.h ****       template<typename _Tp1>
 104:/usr/include/c++/4.6/bits/allocator.h ****         struct rebind
 105:/usr/include/c++/4.6/bits/allocator.h ****         { typedef allocator<_Tp1> other; };
 106:/usr/include/c++/4.6/bits/allocator.h **** 
 107:/usr/include/c++/4.6/bits/allocator.h ****       allocator() throw() { }
 108:/usr/include/c++/4.6/bits/allocator.h **** 
 109:/usr/include/c++/4.6/bits/allocator.h ****       allocator(const allocator& __a) throw()
 110:/usr/include/c++/4.6/bits/allocator.h ****       : __glibcxx_base_allocator<_Tp>(__a) { }
 111:/usr/include/c++/4.6/bits/allocator.h **** 
 112:/usr/include/c++/4.6/bits/allocator.h ****       template<typename _Tp1>
 113:/usr/include/c++/4.6/bits/allocator.h ****         allocator(const allocator<_Tp1>&) throw() { }
GAS LISTING /tmp/ccJa8FUH.s 			page 53


 114:/usr/include/c++/4.6/bits/allocator.h **** 
 115:/usr/include/c++/4.6/bits/allocator.h ****       ~allocator() throw() { }
 1463              		.loc 4 115 0
 1464              		.cfi_startproc
 1465 0000 55       		pushq	%rbp
 1466              	.LCFI42:
 1467              		.cfi_def_cfa_offset 16
 1468              		.cfi_offset 6, -16
 1469 0001 4889E5   		movq	%rsp, %rbp
 1470              	.LCFI43:
 1471              		.cfi_def_cfa_register 6
 1472 0004 4883EC10 		subq	$16, %rsp
 1473 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1474              	.LBB14:
 1475              		.loc 4 115 0
 1476 000c 488B45F8 		movq	-8(%rbp), %rax
 1477 0010 4889C7   		movq	%rax, %rdi
 1478 0013 E8000000 		call	_ZN9__gnu_cxx13new_allocatorI5pointED2Ev
 1478      00
 1479              	.LBE14:
 1480 0018 C9       		leave
 1481              	.LCFI44:
 1482              		.cfi_def_cfa 7, 8
 1483 0019 C3       		ret
 1484              		.cfi_endproc
 1485              	.LFE1535:
 1487              		.section	.text._ZNSt12_Vector_baseI5pointSaIS0_EE13_M_deallocateEPS0_m,"axG",@progbits,_ZNSt12_Vec
 1488              		.align 2
 1489              		.weak	_ZNSt12_Vector_baseI5pointSaIS0_EE13_M_deallocateEPS0_m
 1491              	_ZNSt12_Vector_baseI5pointSaIS0_EE13_M_deallocateEPS0_m:
 1492              	.LFB1537:
 153:/usr/include/c++/4.6/bits/stl_vector.h ****       _M_deallocate(typename _Tp_alloc_type::pointer __p, size_t __n)
 1493              		.loc 2 153 0
 1494              		.cfi_startproc
 1495 0000 55       		pushq	%rbp
 1496              	.LCFI45:
 1497              		.cfi_def_cfa_offset 16
 1498              		.cfi_offset 6, -16
 1499 0001 4889E5   		movq	%rsp, %rbp
 1500              	.LCFI46:
 1501              		.cfi_def_cfa_register 6
 1502 0004 4883EC20 		subq	$32, %rsp
 1503 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1504 000c 488975F0 		movq	%rsi, -16(%rbp)
 1505 0010 488955E8 		movq	%rdx, -24(%rbp)
 155:/usr/include/c++/4.6/bits/stl_vector.h **** 	if (__p)
 1506              		.loc 2 155 0
 1507 0014 48837DF0 		cmpq	$0, -16(%rbp)
 1507      00
 1508 0019 7417     		je	.L59
 156:/usr/include/c++/4.6/bits/stl_vector.h **** 	  _M_impl.deallocate(__p, __n);
 1509              		.loc 2 156 0
 1510 001b 488B45F8 		movq	-8(%rbp), %rax
 1511 001f 488B55E8 		movq	-24(%rbp), %rdx
 1512 0023 488B4DF0 		movq	-16(%rbp), %rcx
 1513 0027 4889CE   		movq	%rcx, %rsi
 1514 002a 4889C7   		movq	%rax, %rdi
GAS LISTING /tmp/ccJa8FUH.s 			page 54


 1515 002d E8000000 		call	_ZN9__gnu_cxx13new_allocatorI5pointE10deallocateEPS1_m
 1515      00
 1516              	.L59:
 157:/usr/include/c++/4.6/bits/stl_vector.h ****       }
 1517              		.loc 2 157 0
 1518 0032 C9       		leave
 1519              	.LCFI47:
 1520              		.cfi_def_cfa 7, 8
 1521 0033 C3       		ret
 1522              		.cfi_endproc
 1523              	.LFE1537:
 1525              		.section	.text._ZSt8_DestroyIP5pointEvT_S2_,"axG",@progbits,_ZSt8_DestroyIP5pointEvT_S2_,comdat
 1526              		.weak	_ZSt8_DestroyIP5pointEvT_S2_
 1528              	_ZSt8_DestroyIP5pointEvT_S2_:
 1529              	.LFB1538:
 123:/usr/include/c++/4.6/bits/stl_construct.h ****     _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 1530              		.loc 3 123 0
 1531              		.cfi_startproc
 1532 0000 55       		pushq	%rbp
 1533              	.LCFI48:
 1534              		.cfi_def_cfa_offset 16
 1535              		.cfi_offset 6, -16
 1536 0001 4889E5   		movq	%rsp, %rbp
 1537              	.LCFI49:
 1538              		.cfi_def_cfa_register 6
 1539 0004 4883EC10 		subq	$16, %rsp
 1540 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1541 000c 488975F0 		movq	%rsi, -16(%rbp)
 1542              	.LBB15:
 127:/usr/include/c++/4.6/bits/stl_construct.h ****       std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
 1543              		.loc 3 127 0
 1544 0010 488B55F0 		movq	-16(%rbp), %rdx
 1545 0014 488B45F8 		movq	-8(%rbp), %rax
 1546 0018 4889D6   		movq	%rdx, %rsi
 1547 001b 4889C7   		movq	%rax, %rdi
 1548 001e E8000000 		call	_ZNSt12_Destroy_auxILb1EE9__destroyIP5pointEEvT_S4_
 1548      00
 1549              	.LBE15:
 129:/usr/include/c++/4.6/bits/stl_construct.h ****     }
 1550              		.loc 3 129 0
 1551 0023 C9       		leave
 1552              	.LCFI50:
 1553              		.cfi_def_cfa 7, 8
 1554 0024 C3       		ret
 1555              		.cfi_endproc
 1556              	.LFE1538:
 1558              		.section	.text._ZNSaI5pointEC2Ev,"axG",@progbits,_ZNSaI5pointEC5Ev,comdat
 1559              		.align 2
 1560              		.weak	_ZNSaI5pointEC2Ev
 1562              	_ZNSaI5pointEC2Ev:
 1563              	.LFB1545:
 107:/usr/include/c++/4.6/bits/allocator.h ****       allocator() throw() { }
 1564              		.loc 4 107 0
 1565              		.cfi_startproc
 1566 0000 55       		pushq	%rbp
 1567              	.LCFI51:
 1568              		.cfi_def_cfa_offset 16
GAS LISTING /tmp/ccJa8FUH.s 			page 55


 1569              		.cfi_offset 6, -16
 1570 0001 4889E5   		movq	%rsp, %rbp
 1571              	.LCFI52:
 1572              		.cfi_def_cfa_register 6
 1573 0004 4883EC10 		subq	$16, %rsp
 1574 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1575              	.LBB16:
 107:/usr/include/c++/4.6/bits/allocator.h ****       allocator() throw() { }
 1576              		.loc 4 107 0
 1577 000c 488B45F8 		movq	-8(%rbp), %rax
 1578 0010 4889C7   		movq	%rax, %rdi
 1579 0013 E8000000 		call	_ZN9__gnu_cxx13new_allocatorI5pointEC2Ev
 1579      00
 1580              	.LBE16:
 1581 0018 C9       		leave
 1582              	.LCFI53:
 1583              		.cfi_def_cfa 7, 8
 1584 0019 C3       		ret
 1585              		.cfi_endproc
 1586              	.LFE1545:
 1588              		.section	.text._ZN9__gnu_cxx13new_allocatorI5pointED2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_allocat
 1589              		.align 2
 1590              		.weak	_ZN9__gnu_cxx13new_allocatorI5pointED2Ev
 1592              	_ZN9__gnu_cxx13new_allocatorI5pointED2Ev:
 1593              	.LFB1548:
 1594              		.file 5 "/usr/include/c++/4.6/ext/new_allocator.h"
   1:/usr/include/c++/4.6/ext/new_allocator.h **** // Allocator that wraps operator new -*- C++ -*-
   2:/usr/include/c++/4.6/ext/new_allocator.h **** 
   3:/usr/include/c++/4.6/ext/new_allocator.h **** // Copyright (C) 2001, 2002, 2003, 2004, 2005, 2009, 2010
   4:/usr/include/c++/4.6/ext/new_allocator.h **** // Free Software Foundation, Inc.
   5:/usr/include/c++/4.6/ext/new_allocator.h **** //
   6:/usr/include/c++/4.6/ext/new_allocator.h **** // This file is part of the GNU ISO C++ Library.  This library is free
   7:/usr/include/c++/4.6/ext/new_allocator.h **** // software; you can redistribute it and/or modify it under the
   8:/usr/include/c++/4.6/ext/new_allocator.h **** // terms of the GNU General Public License as published by the
   9:/usr/include/c++/4.6/ext/new_allocator.h **** // Free Software Foundation; either version 3, or (at your option)
  10:/usr/include/c++/4.6/ext/new_allocator.h **** // any later version.
  11:/usr/include/c++/4.6/ext/new_allocator.h **** 
  12:/usr/include/c++/4.6/ext/new_allocator.h **** // This library is distributed in the hope that it will be useful,
  13:/usr/include/c++/4.6/ext/new_allocator.h **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/usr/include/c++/4.6/ext/new_allocator.h **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/usr/include/c++/4.6/ext/new_allocator.h **** // GNU General Public License for more details.
  16:/usr/include/c++/4.6/ext/new_allocator.h **** 
  17:/usr/include/c++/4.6/ext/new_allocator.h **** // Under Section 7 of GPL version 3, you are granted additional
  18:/usr/include/c++/4.6/ext/new_allocator.h **** // permissions described in the GCC Runtime Library Exception, version
  19:/usr/include/c++/4.6/ext/new_allocator.h **** // 3.1, as published by the Free Software Foundation.
  20:/usr/include/c++/4.6/ext/new_allocator.h **** 
  21:/usr/include/c++/4.6/ext/new_allocator.h **** // You should have received a copy of the GNU General Public License and
  22:/usr/include/c++/4.6/ext/new_allocator.h **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/usr/include/c++/4.6/ext/new_allocator.h **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/usr/include/c++/4.6/ext/new_allocator.h **** // <http://www.gnu.org/licenses/>.
  25:/usr/include/c++/4.6/ext/new_allocator.h **** 
  26:/usr/include/c++/4.6/ext/new_allocator.h **** /** @file ext/new_allocator.h
  27:/usr/include/c++/4.6/ext/new_allocator.h ****  *  This file is a GNU extension to the Standard C++ Library.
  28:/usr/include/c++/4.6/ext/new_allocator.h ****  */
  29:/usr/include/c++/4.6/ext/new_allocator.h **** 
  30:/usr/include/c++/4.6/ext/new_allocator.h **** #ifndef _NEW_ALLOCATOR_H
  31:/usr/include/c++/4.6/ext/new_allocator.h **** #define _NEW_ALLOCATOR_H 1
GAS LISTING /tmp/ccJa8FUH.s 			page 56


  32:/usr/include/c++/4.6/ext/new_allocator.h **** 
  33:/usr/include/c++/4.6/ext/new_allocator.h **** #include <bits/c++config.h>
  34:/usr/include/c++/4.6/ext/new_allocator.h **** #include <new>
  35:/usr/include/c++/4.6/ext/new_allocator.h **** #include <bits/functexcept.h>
  36:/usr/include/c++/4.6/ext/new_allocator.h **** #include <bits/move.h>
  37:/usr/include/c++/4.6/ext/new_allocator.h **** 
  38:/usr/include/c++/4.6/ext/new_allocator.h **** namespace __gnu_cxx _GLIBCXX_VISIBILITY(default)
  39:/usr/include/c++/4.6/ext/new_allocator.h **** {
  40:/usr/include/c++/4.6/ext/new_allocator.h **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  41:/usr/include/c++/4.6/ext/new_allocator.h **** 
  42:/usr/include/c++/4.6/ext/new_allocator.h ****   using std::size_t;
  43:/usr/include/c++/4.6/ext/new_allocator.h ****   using std::ptrdiff_t;
  44:/usr/include/c++/4.6/ext/new_allocator.h **** 
  45:/usr/include/c++/4.6/ext/new_allocator.h ****   /**
  46:/usr/include/c++/4.6/ext/new_allocator.h ****    *  @brief  An allocator that uses global new, as per [20.4].
  47:/usr/include/c++/4.6/ext/new_allocator.h ****    *  @ingroup allocators
  48:/usr/include/c++/4.6/ext/new_allocator.h ****    *
  49:/usr/include/c++/4.6/ext/new_allocator.h ****    *  This is precisely the allocator defined in the C++ Standard. 
  50:/usr/include/c++/4.6/ext/new_allocator.h ****    *    - all allocation calls operator new
  51:/usr/include/c++/4.6/ext/new_allocator.h ****    *    - all deallocation calls operator delete
  52:/usr/include/c++/4.6/ext/new_allocator.h ****    */
  53:/usr/include/c++/4.6/ext/new_allocator.h ****   template<typename _Tp>
  54:/usr/include/c++/4.6/ext/new_allocator.h ****     class new_allocator
  55:/usr/include/c++/4.6/ext/new_allocator.h ****     {
  56:/usr/include/c++/4.6/ext/new_allocator.h ****     public:
  57:/usr/include/c++/4.6/ext/new_allocator.h ****       typedef size_t     size_type;
  58:/usr/include/c++/4.6/ext/new_allocator.h ****       typedef ptrdiff_t  difference_type;
  59:/usr/include/c++/4.6/ext/new_allocator.h ****       typedef _Tp*       pointer;
  60:/usr/include/c++/4.6/ext/new_allocator.h ****       typedef const _Tp* const_pointer;
  61:/usr/include/c++/4.6/ext/new_allocator.h ****       typedef _Tp&       reference;
  62:/usr/include/c++/4.6/ext/new_allocator.h ****       typedef const _Tp& const_reference;
  63:/usr/include/c++/4.6/ext/new_allocator.h ****       typedef _Tp        value_type;
  64:/usr/include/c++/4.6/ext/new_allocator.h **** 
  65:/usr/include/c++/4.6/ext/new_allocator.h ****       template<typename _Tp1>
  66:/usr/include/c++/4.6/ext/new_allocator.h ****         struct rebind
  67:/usr/include/c++/4.6/ext/new_allocator.h ****         { typedef new_allocator<_Tp1> other; };
  68:/usr/include/c++/4.6/ext/new_allocator.h **** 
  69:/usr/include/c++/4.6/ext/new_allocator.h ****       new_allocator() throw() { }
  70:/usr/include/c++/4.6/ext/new_allocator.h **** 
  71:/usr/include/c++/4.6/ext/new_allocator.h ****       new_allocator(const new_allocator&) throw() { }
  72:/usr/include/c++/4.6/ext/new_allocator.h **** 
  73:/usr/include/c++/4.6/ext/new_allocator.h ****       template<typename _Tp1>
  74:/usr/include/c++/4.6/ext/new_allocator.h ****         new_allocator(const new_allocator<_Tp1>&) throw() { }
  75:/usr/include/c++/4.6/ext/new_allocator.h **** 
  76:/usr/include/c++/4.6/ext/new_allocator.h ****       ~new_allocator() throw() { }
 1595              		.loc 5 76 0
 1596              		.cfi_startproc
 1597 0000 55       		pushq	%rbp
 1598              	.LCFI54:
 1599              		.cfi_def_cfa_offset 16
 1600              		.cfi_offset 6, -16
 1601 0001 4889E5   		movq	%rsp, %rbp
 1602              	.LCFI55:
 1603              		.cfi_def_cfa_register 6
 1604 0004 48897DF8 		movq	%rdi, -8(%rbp)
 1605              		.loc 5 76 0
 1606 0008 5D       		popq	%rbp
GAS LISTING /tmp/ccJa8FUH.s 			page 57


 1607              	.LCFI56:
 1608              		.cfi_def_cfa 7, 8
 1609 0009 C3       		ret
 1610              		.cfi_endproc
 1611              	.LFE1548:
 1613              		.section	.text._ZN9__gnu_cxx13new_allocatorI5pointE10deallocateEPS1_m,"axG",@progbits,_ZN9__gnu_cx
 1614              		.align 2
 1615              		.weak	_ZN9__gnu_cxx13new_allocatorI5pointE10deallocateEPS1_m
 1617              	_ZN9__gnu_cxx13new_allocatorI5pointE10deallocateEPS1_m:
 1618              	.LFB1550:
  77:/usr/include/c++/4.6/ext/new_allocator.h **** 
  78:/usr/include/c++/4.6/ext/new_allocator.h ****       pointer
  79:/usr/include/c++/4.6/ext/new_allocator.h ****       address(reference __x) const { return std::__addressof(__x); }
  80:/usr/include/c++/4.6/ext/new_allocator.h **** 
  81:/usr/include/c++/4.6/ext/new_allocator.h ****       const_pointer
  82:/usr/include/c++/4.6/ext/new_allocator.h ****       address(const_reference __x) const { return std::__addressof(__x); }
  83:/usr/include/c++/4.6/ext/new_allocator.h **** 
  84:/usr/include/c++/4.6/ext/new_allocator.h ****       // NB: __n is permitted to be 0.  The C++ standard says nothing
  85:/usr/include/c++/4.6/ext/new_allocator.h ****       // about what the return value is when __n == 0.
  86:/usr/include/c++/4.6/ext/new_allocator.h ****       pointer
  87:/usr/include/c++/4.6/ext/new_allocator.h ****       allocate(size_type __n, const void* = 0)
  88:/usr/include/c++/4.6/ext/new_allocator.h ****       { 
  89:/usr/include/c++/4.6/ext/new_allocator.h **** 	if (__n > this->max_size())
  90:/usr/include/c++/4.6/ext/new_allocator.h **** 	  std::__throw_bad_alloc();
  91:/usr/include/c++/4.6/ext/new_allocator.h **** 
  92:/usr/include/c++/4.6/ext/new_allocator.h **** 	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
  93:/usr/include/c++/4.6/ext/new_allocator.h ****       }
  94:/usr/include/c++/4.6/ext/new_allocator.h **** 
  95:/usr/include/c++/4.6/ext/new_allocator.h ****       // __p is not permitted to be a null pointer.
  96:/usr/include/c++/4.6/ext/new_allocator.h ****       void
  97:/usr/include/c++/4.6/ext/new_allocator.h ****       deallocate(pointer __p, size_type)
 1619              		.loc 5 97 0
 1620              		.cfi_startproc
 1621 0000 55       		pushq	%rbp
 1622              	.LCFI57:
 1623              		.cfi_def_cfa_offset 16
 1624              		.cfi_offset 6, -16
 1625 0001 4889E5   		movq	%rsp, %rbp
 1626              	.LCFI58:
 1627              		.cfi_def_cfa_register 6
 1628 0004 4883EC20 		subq	$32, %rsp
 1629 0008 48897DF8 		movq	%rdi, -8(%rbp)
 1630 000c 488975F0 		movq	%rsi, -16(%rbp)
 1631 0010 488955E8 		movq	%rdx, -24(%rbp)
  98:/usr/include/c++/4.6/ext/new_allocator.h ****       { ::operator delete(__p); }
 1632              		.loc 5 98 0
 1633 0014 488B45F0 		movq	-16(%rbp), %rax
 1634 0018 4889C7   		movq	%rax, %rdi
 1635 001b E8000000 		call	_ZdlPv
 1635      00
 1636 0020 C9       		leave
 1637              	.LCFI59:
 1638              		.cfi_def_cfa 7, 8
 1639 0021 C3       		ret
 1640              		.cfi_endproc
 1641              	.LFE1550:
 1643              		.section	.text._ZNSt12_Destroy_auxILb1EE9__destroyIP5pointEEvT_S4_,"axG",@progbits,_ZNSt12_Destroy
GAS LISTING /tmp/ccJa8FUH.s 			page 58


 1644              		.weak	_ZNSt12_Destroy_auxILb1EE9__destroyIP5pointEEvT_S4_
 1646              	_ZNSt12_Destroy_auxILb1EE9__destroyIP5pointEEvT_S4_:
 1647              	.LFB1551:
 113:/usr/include/c++/4.6/bits/stl_construct.h ****         __destroy(_ForwardIterator, _ForwardIterator) { }
 1648              		.loc 3 113 0
 1649              		.cfi_startproc
 1650 0000 55       		pushq	%rbp
 1651              	.LCFI60:
 1652              		.cfi_def_cfa_offset 16
 1653              		.cfi_offset 6, -16
 1654 0001 4889E5   		movq	%rsp, %rbp
 1655              	.LCFI61:
 1656              		.cfi_def_cfa_register 6
 1657 0004 48897DF8 		movq	%rdi, -8(%rbp)
 1658 0008 488975F0 		movq	%rsi, -16(%rbp)
 113:/usr/include/c++/4.6/bits/stl_construct.h ****         __destroy(_ForwardIterator, _ForwardIterator) { }
 1659              		.loc 3 113 0
 1660 000c 5D       		popq	%rbp
 1661              	.LCFI62:
 1662              		.cfi_def_cfa 7, 8
 1663 000d C3       		ret
 1664              		.cfi_endproc
 1665              	.LFE1551:
 1667              		.section	.text._ZN9__gnu_cxx13new_allocatorI5pointEC2Ev,"axG",@progbits,_ZN9__gnu_cxx13new_allocat
 1668              		.align 2
 1669              		.weak	_ZN9__gnu_cxx13new_allocatorI5pointEC2Ev
 1671              	_ZN9__gnu_cxx13new_allocatorI5pointEC2Ev:
 1672              	.LFB1553:
  69:/usr/include/c++/4.6/ext/new_allocator.h ****       new_allocator() throw() { }
 1673              		.loc 5 69 0
 1674              		.cfi_startproc
 1675 0000 55       		pushq	%rbp
 1676              	.LCFI63:
 1677              		.cfi_def_cfa_offset 16
 1678              		.cfi_offset 6, -16
 1679 0001 4889E5   		movq	%rsp, %rbp
 1680              	.LCFI64:
 1681              		.cfi_def_cfa_register 6
 1682 0004 48897DF8 		movq	%rdi, -8(%rbp)
  69:/usr/include/c++/4.6/ext/new_allocator.h ****       new_allocator() throw() { }
 1683              		.loc 5 69 0
 1684 0008 5D       		popq	%rbp
 1685              	.LCFI65:
 1686              		.cfi_def_cfa 7, 8
 1687 0009 C3       		ret
 1688              		.cfi_endproc
 1689              	.LFE1553:
 1691              		.text
 1693              	_Z41__static_initialization_and_destruction_0ii:
 1694              	.LFB1555:
 1695              		.loc 1 198 0
 1696              		.cfi_startproc
 1697 0bd6 55       		pushq	%rbp
 1698              	.LCFI66:
 1699              		.cfi_def_cfa_offset 16
 1700              		.cfi_offset 6, -16
 1701 0bd7 4889E5   		movq	%rsp, %rbp
GAS LISTING /tmp/ccJa8FUH.s 			page 59


 1702              	.LCFI67:
 1703              		.cfi_def_cfa_register 6
 1704 0bda 4883EC10 		subq	$16, %rsp
 1705 0bde 897DFC   		movl	%edi, -4(%rbp)
 1706 0be1 8975F8   		movl	%esi, -8(%rbp)
 1707              		.loc 1 198 0
 1708 0be4 837DFC01 		cmpl	$1, -4(%rbp)
 1709 0be8 752A     		jne	.L68
 1710              		.loc 1 198 0 is_stmt 0 discriminator 1
 1711 0bea 817DF8FF 		cmpl	$65535, -8(%rbp)
 1711      FF0000
 1712 0bf1 7521     		jne	.L68
 1713              		.file 6 "/usr/include/c++/4.6/iostream"
   1:/usr/include/c++/4.6/iostream **** // Standard iostream objects -*- C++ -*-
   2:/usr/include/c++/4.6/iostream **** 
   3:/usr/include/c++/4.6/iostream **** // Copyright (C) 1997, 1998, 1999, 2001, 2002, 2005, 2008, 2009, 2010
   4:/usr/include/c++/4.6/iostream **** // Free Software Foundation, Inc.
   5:/usr/include/c++/4.6/iostream **** //
   6:/usr/include/c++/4.6/iostream **** // This file is part of the GNU ISO C++ Library.  This library is free
   7:/usr/include/c++/4.6/iostream **** // software; you can redistribute it and/or modify it under the
   8:/usr/include/c++/4.6/iostream **** // terms of the GNU General Public License as published by the
   9:/usr/include/c++/4.6/iostream **** // Free Software Foundation; either version 3, or (at your option)
  10:/usr/include/c++/4.6/iostream **** // any later version.
  11:/usr/include/c++/4.6/iostream **** 
  12:/usr/include/c++/4.6/iostream **** // This library is distributed in the hope that it will be useful,
  13:/usr/include/c++/4.6/iostream **** // but WITHOUT ANY WARRANTY; without even the implied warranty of
  14:/usr/include/c++/4.6/iostream **** // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  15:/usr/include/c++/4.6/iostream **** // GNU General Public License for more details.
  16:/usr/include/c++/4.6/iostream **** 
  17:/usr/include/c++/4.6/iostream **** // Under Section 7 of GPL version 3, you are granted additional
  18:/usr/include/c++/4.6/iostream **** // permissions described in the GCC Runtime Library Exception, version
  19:/usr/include/c++/4.6/iostream **** // 3.1, as published by the Free Software Foundation.
  20:/usr/include/c++/4.6/iostream **** 
  21:/usr/include/c++/4.6/iostream **** // You should have received a copy of the GNU General Public License and
  22:/usr/include/c++/4.6/iostream **** // a copy of the GCC Runtime Library Exception along with this program;
  23:/usr/include/c++/4.6/iostream **** // see the files COPYING3 and COPYING.RUNTIME respectively.  If not, see
  24:/usr/include/c++/4.6/iostream **** // <http://www.gnu.org/licenses/>.
  25:/usr/include/c++/4.6/iostream **** 
  26:/usr/include/c++/4.6/iostream **** /** @file include/iostream
  27:/usr/include/c++/4.6/iostream ****  *  This is a Standard C++ Library header.
  28:/usr/include/c++/4.6/iostream ****  */
  29:/usr/include/c++/4.6/iostream **** 
  30:/usr/include/c++/4.6/iostream **** //
  31:/usr/include/c++/4.6/iostream **** // ISO C++ 14882: 27.3  Standard iostream objects
  32:/usr/include/c++/4.6/iostream **** //
  33:/usr/include/c++/4.6/iostream **** 
  34:/usr/include/c++/4.6/iostream **** #ifndef _GLIBCXX_IOSTREAM
  35:/usr/include/c++/4.6/iostream **** #define _GLIBCXX_IOSTREAM 1
  36:/usr/include/c++/4.6/iostream **** 
  37:/usr/include/c++/4.6/iostream **** #pragma GCC system_header
  38:/usr/include/c++/4.6/iostream **** 
  39:/usr/include/c++/4.6/iostream **** #include <bits/c++config.h>
  40:/usr/include/c++/4.6/iostream **** #include <ostream>
  41:/usr/include/c++/4.6/iostream **** #include <istream>
  42:/usr/include/c++/4.6/iostream **** 
  43:/usr/include/c++/4.6/iostream **** namespace std _GLIBCXX_VISIBILITY(default)
  44:/usr/include/c++/4.6/iostream **** {
GAS LISTING /tmp/ccJa8FUH.s 			page 60


  45:/usr/include/c++/4.6/iostream **** _GLIBCXX_BEGIN_NAMESPACE_VERSION
  46:/usr/include/c++/4.6/iostream **** 
  47:/usr/include/c++/4.6/iostream ****   /**
  48:/usr/include/c++/4.6/iostream ****    *  @name Standard Stream Objects
  49:/usr/include/c++/4.6/iostream ****    *
  50:/usr/include/c++/4.6/iostream ****    *  The &lt;iostream&gt; header declares the eight <em>standard stream
  51:/usr/include/c++/4.6/iostream ****    *  objects</em>.  For other declarations, see
  52:/usr/include/c++/4.6/iostream ****    *  http://gcc.gnu.org/onlinedocs/libstdc++/manual/bk01pt11ch24.html
  53:/usr/include/c++/4.6/iostream ****    *  and the @link iosfwd I/O forward declarations @endlink
  54:/usr/include/c++/4.6/iostream ****    *
  55:/usr/include/c++/4.6/iostream ****    *  They are required by default to cooperate with the global C
  56:/usr/include/c++/4.6/iostream ****    *  library's @c FILE streams, and to be available during program
  57:/usr/include/c++/4.6/iostream ****    *  startup and termination. For more information, see the HOWTO
  58:/usr/include/c++/4.6/iostream ****    *  linked to above.
  59:/usr/include/c++/4.6/iostream ****   */
  60:/usr/include/c++/4.6/iostream ****   //@{
  61:/usr/include/c++/4.6/iostream ****   extern istream cin;		/// Linked to standard input
  62:/usr/include/c++/4.6/iostream ****   extern ostream cout;		/// Linked to standard output
  63:/usr/include/c++/4.6/iostream ****   extern ostream cerr;		/// Linked to standard error (unbuffered)
  64:/usr/include/c++/4.6/iostream ****   extern ostream clog;		/// Linked to standard error (buffered)
  65:/usr/include/c++/4.6/iostream **** 
  66:/usr/include/c++/4.6/iostream **** #ifdef _GLIBCXX_USE_WCHAR_T
  67:/usr/include/c++/4.6/iostream ****   extern wistream wcin;		/// Linked to standard input
  68:/usr/include/c++/4.6/iostream ****   extern wostream wcout;	/// Linked to standard output
  69:/usr/include/c++/4.6/iostream ****   extern wostream wcerr;	/// Linked to standard error (unbuffered)
  70:/usr/include/c++/4.6/iostream ****   extern wostream wclog;	/// Linked to standard error (buffered)
  71:/usr/include/c++/4.6/iostream **** #endif
  72:/usr/include/c++/4.6/iostream ****   //@}
  73:/usr/include/c++/4.6/iostream **** 
  74:/usr/include/c++/4.6/iostream ****   // For construction of filebuffers for cout, cin, cerr, clog et. al.
  75:/usr/include/c++/4.6/iostream ****   static ios_base::Init __ioinit;
 1714              		.loc 6 75 0 is_stmt 1
 1715 0bf3 BF000000 		movl	$_ZStL8__ioinit, %edi
 1715      00
 1716 0bf8 E8000000 		call	_ZNSt8ios_base4InitC1Ev
 1716      00
 1717 0bfd B8000000 		movl	$_ZNSt8ios_base4InitD1Ev, %eax
 1717      00
 1718 0c02 BA000000 		movl	$__dso_handle, %edx
 1718      00
 1719 0c07 BE000000 		movl	$_ZStL8__ioinit, %esi
 1719      00
 1720 0c0c 4889C7   		movq	%rax, %rdi
 1721 0c0f E8000000 		call	__cxa_atexit
 1721      00
 1722              	.L68:
 1723              		.loc 1 198 0
 1724 0c14 C9       		leave
 1725              	.LCFI68:
 1726              		.cfi_def_cfa 7, 8
 1727 0c15 C3       		ret
 1728              		.cfi_endproc
 1729              	.LFE1555:
 1732              	_GLOBAL__sub_I__Z11resetPointsPSt6vectorI5pointSaIS0_EEPd:
 1733              	.LFB1556:
 1734              		.loc 1 198 0
 1735              		.cfi_startproc
GAS LISTING /tmp/ccJa8FUH.s 			page 61


 1736 0c16 55       		pushq	%rbp
 1737              	.LCFI69:
 1738              		.cfi_def_cfa_offset 16
 1739              		.cfi_offset 6, -16
 1740 0c17 4889E5   		movq	%rsp, %rbp
 1741              	.LCFI70:
 1742              		.cfi_def_cfa_register 6
 1743              		.loc 1 198 0
 1744 0c1a BEFFFF00 		movl	$65535, %esi
 1744      00
 1745 0c1f BF010000 		movl	$1, %edi
 1745      00
 1746 0c24 E8ADFFFF 		call	_Z41__static_initialization_and_destruction_0ii
 1746      FF
 1747 0c29 5D       		popq	%rbp
 1748              	.LCFI71:
 1749              		.cfi_def_cfa 7, 8
 1750 0c2a C3       		ret
 1751              		.cfi_endproc
 1752              	.LFE1556:
 1754              		.section	.ctors,"aw",@progbits
 1755              		.align 8
 1756 0000 00000000 		.quad	_GLOBAL__sub_I__Z11resetPointsPSt6vectorI5pointSaIS0_EEPd
 1756      00000000 
 1757              		.section	.rodata
 1758              		.align 8
 1761              	_ZZL18__gthread_active_pvE20__gthread_active_ptr:
 1762 0060 00000000 		.quad	_ZL22__gthrw_pthread_cancelm
 1762      00000000 
 1763              		.weakref	_ZL20__gthrw_pthread_oncePiPFvvE,pthread_once
 1764              		.weakref	_ZL27__gthrw_pthread_getspecificj,pthread_getspecific
 1765              		.weakref	_ZL27__gthrw_pthread_setspecificjPKv,pthread_setspecific
 1766              		.weakref	_ZL22__gthrw_pthread_createPmPK14pthread_attr_tPFPvS3_ES3_,pthread_create
 1767              		.weakref	_ZL20__gthrw_pthread_joinmPPv,pthread_join
 1768              		.weakref	_ZL21__gthrw_pthread_equalmm,pthread_equal
 1769              		.weakref	_ZL20__gthrw_pthread_selfv,pthread_self
 1770              		.weakref	_ZL22__gthrw_pthread_detachm,pthread_detach
 1771              		.weakref	_ZL22__gthrw_pthread_cancelm,pthread_cancel
 1772              		.weakref	_ZL19__gthrw_sched_yieldv,sched_yield
 1773              		.weakref	_ZL26__gthrw_pthread_mutex_lockP15pthread_mutex_t,pthread_mutex_lock
 1774              		.weakref	_ZL29__gthrw_pthread_mutex_trylockP15pthread_mutex_t,pthread_mutex_trylock
 1775              		.weakref	_ZL31__gthrw_pthread_mutex_timedlockP15pthread_mutex_tPK8timespec,pthread_mutex_timedlock
 1776              		.weakref	_ZL28__gthrw_pthread_mutex_unlockP15pthread_mutex_t,pthread_mutex_unlock
 1777              		.weakref	_ZL26__gthrw_pthread_mutex_initP15pthread_mutex_tPK19pthread_mutexattr_t,pthread_mutex_in
 1778              		.weakref	_ZL29__gthrw_pthread_mutex_destroyP15pthread_mutex_t,pthread_mutex_destroy
 1779              		.weakref	_ZL30__gthrw_pthread_cond_broadcastP14pthread_cond_t,pthread_cond_broadcast
 1780              		.weakref	_ZL27__gthrw_pthread_cond_signalP14pthread_cond_t,pthread_cond_signal
 1781              		.weakref	_ZL25__gthrw_pthread_cond_waitP14pthread_cond_tP15pthread_mutex_t,pthread_cond_wait
 1782              		.weakref	_ZL30__gthrw_pthread_cond_timedwaitP14pthread_cond_tP15pthread_mutex_tPK8timespec,pthread
 1783              		.weakref	_ZL28__gthrw_pthread_cond_destroyP14pthread_cond_t,pthread_cond_destroy
 1784              		.weakref	_ZL26__gthrw_pthread_key_createPjPFvPvE,pthread_key_create
 1785              		.weakref	_ZL26__gthrw_pthread_key_deletej,pthread_key_delete
 1786              		.weakref	_ZL30__gthrw_pthread_mutexattr_initP19pthread_mutexattr_t,pthread_mutexattr_init
 1787              		.weakref	_ZL33__gthrw_pthread_mutexattr_settypeP19pthread_mutexattr_ti,pthread_mutexattr_settype
 1788              		.weakref	_ZL33__gthrw_pthread_mutexattr_destroyP19pthread_mutexattr_t,pthread_mutexattr_destroy
 1789              		.weak	_ZNSt6vectorI5pointSaIS0_EEC1Ev
 1790              		.set	_ZNSt6vectorI5pointSaIS0_EEC1Ev,_ZNSt6vectorI5pointSaIS0_EEC2Ev
GAS LISTING /tmp/ccJa8FUH.s 			page 62


 1791              		.weak	_ZNSt6vectorI5pointSaIS0_EED1Ev
 1792              		.set	_ZNSt6vectorI5pointSaIS0_EED1Ev,_ZNSt6vectorI5pointSaIS0_EED2Ev
 1793              		.weak	_ZNSt12_Vector_baseI5pointSaIS0_EE12_Vector_implD1Ev
 1794              		.set	_ZNSt12_Vector_baseI5pointSaIS0_EE12_Vector_implD1Ev,_ZNSt12_Vector_baseI5pointSaIS0_EE12_Vec
 1795              		.weak	_ZNSt12_Vector_baseI5pointSaIS0_EEC1Ev
 1796              		.set	_ZNSt12_Vector_baseI5pointSaIS0_EEC1Ev,_ZNSt12_Vector_baseI5pointSaIS0_EEC2Ev
 1797              		.weak	_ZNSt12_Vector_baseI5pointSaIS0_EED1Ev
 1798              		.set	_ZNSt12_Vector_baseI5pointSaIS0_EED1Ev,_ZNSt12_Vector_baseI5pointSaIS0_EED2Ev
 1799              		.weak	_ZNSt12_Vector_baseI5pointSaIS0_EE12_Vector_implC1Ev
 1800              		.set	_ZNSt12_Vector_baseI5pointSaIS0_EE12_Vector_implC1Ev,_ZNSt12_Vector_baseI5pointSaIS0_EE12_Vec
 1801              		.weak	_ZNSaI5pointED1Ev
 1802              		.set	_ZNSaI5pointED1Ev,_ZNSaI5pointED2Ev
 1803              		.weak	_ZNSaI5pointEC1Ev
 1804              		.set	_ZNSaI5pointEC1Ev,_ZNSaI5pointEC2Ev
 1805              		.weak	_ZN9__gnu_cxx13new_allocatorI5pointED1Ev
 1806              		.set	_ZN9__gnu_cxx13new_allocatorI5pointED1Ev,_ZN9__gnu_cxx13new_allocatorI5pointED2Ev
 1807              		.weak	_ZN9__gnu_cxx13new_allocatorI5pointEC1Ev
 1808              		.set	_ZN9__gnu_cxx13new_allocatorI5pointEC1Ev,_ZN9__gnu_cxx13new_allocatorI5pointEC2Ev
 1809              		.align 8
 1810              	.LC0:
 1811 0068 00000000 		.long	0
 1812 006c 0000F03F 		.long	1072693248
 1813              		.align 4
 1814              	.LC3:
 1815 0070 CDCCCC3D 		.long	1036831949
 1816              		.align 4
 1817              	.LC4:
 1818 0074 0000803F 		.long	1065353216
 1819              		.align 8
 1820              	.LC10:
 1821 0078 00000000 		.long	0
 1822 007c 00002440 		.long	1076101120
 1823              		.align 8
 1824              	.LC11:
 1825 0080 00000000 		.long	0
 1826 0084 000024C0 		.long	-1071382528
 1827              		.align 4
 1828              	.LC12:
 1829 0088 8FC2F53D 		.long	1039516303
 1830              		.align 4
 1831              	.LC13:
 1832 008c 0AD7233E 		.long	1042536202
 1833              		.align 4
 1834              	.LC14:
 1835 0090 000080BF 		.long	3212836864
 1836              		.align 4
 1837              	.LC15:
 1838 0094 CDCCCCBD 		.long	3184315597
 1839              		.align 4
 1840              	.LC16:
 1841 0098 CDCC8C3F 		.long	1066192077
 1842              		.align 4
 1843              	.LC17:
 1844 009c 2EBA683F 		.long	1063828014
 1845              		.text
 1846              	.Letext0:
 1847              		.file 7 "/usr/lib/gcc/x86_64-linux-gnu/4.6/include/stddef.h"
GAS LISTING /tmp/ccJa8FUH.s 			page 63


 1848              		.file 8 "/usr/include/x86_64-linux-gnu/bits/types.h"
 1849              		.file 9 "/usr/include/time.h"
 1850              		.file 10 "/usr/include/stdio.h"
 1851              		.file 11 "/usr/include/libio.h"
 1852              		.file 12 "<built-in>"
 1853              		.file 13 "/usr/include/wchar.h"
 1854              		.file 14 "/usr/include/c++/4.6/cwchar"
 1855              		.file 15 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/c++config.h"
 1856              		.file 16 "/usr/include/c++/4.6/clocale"
 1857              		.file 17 "/usr/include/c++/4.6/bits/basic_string.h"
 1858              		.file 18 "/usr/include/c++/4.6/bits/stringfwd.h"
 1859              		.file 19 "/usr/include/c++/4.6/bits/ios_base.h"
 1860              		.file 20 "/usr/include/c++/4.6/cwctype"
 1861              		.file 21 "/usr/include/c++/4.6/cstdio"
 1862              		.file 22 "/usr/include/c++/4.6/cstdlib"
 1863              		.file 23 "/usr/include/c++/4.6/iosfwd"
 1864              		.file 24 "/usr/include/c++/4.6/new"
 1865              		.file 25 "/usr/include/c++/4.6/debug/debug.h"
 1866              		.file 26 "/usr/include/c++/4.6/bits/char_traits.h"
 1867              		.file 27 "/usr/include/locale.h"
 1868              		.file 28 "/usr/include/c++/4.6/x86_64-linux-gnu/./bits/atomic_word.h"
 1869              		.file 29 "/usr/include/c++/4.6/ext/numeric_traits.h"
 1870              		.file 30 "/usr/include/c++/4.6/bits/basic_string.tcc"
 1871              		.file 31 "/usr/include/wctype.h"
 1872              		.file 32 "/usr/include/_G_config.h"
 1873              		.file 33 "/usr/include/stdlib.h"
 1874              		.file 34 "load_points.h"
 1875              		.file 35 "/usr/include/c++/4.6/bits/vector.tcc"
GAS LISTING /tmp/ccJa8FUH.s 			page 64


DEFINED SYMBOLS
                            *ABS*:0000000000000000 main.cpp
                             .bss:0000000000000000 _ZStL8__ioinit
     /tmp/ccJa8FUH.s:8      .text:0000000000000000 _Z11resetPointsPSt6vectorI5pointSaIS0_EEPd
     /tmp/ccJa8FUH.s:1060   .text._ZNSt6vectorI5pointSaIS0_EEixEm:0000000000000000 _ZNSt6vectorI5pointSaIS0_EEixEm
     /tmp/ccJa8FUH.s:1023   .text._ZNKSt6vectorI5pointSaIS0_EE4sizeEv:0000000000000000 _ZNKSt6vectorI5pointSaIS0_EE4sizeEv
     /tmp/ccJa8FUH.s:219    .text:000000000000027c _Z8drawaxesPfS_S_
     /tmp/ccJa8FUH.s:388    .text:0000000000000496 main
     /tmp/ccJa8FUH.s:1097   .text._ZNSt6vectorI5pointSaIS0_EEC2Ev:0000000000000000 _ZNSt6vectorI5pointSaIS0_EEC1Ev
     /tmp/ccJa8FUH.s:1127   .text._ZNSt6vectorI5pointSaIS0_EED2Ev:0000000000000000 _ZNSt6vectorI5pointSaIS0_EED1Ev
     /tmp/ccJa8FUH.s:1097   .text._ZNSt6vectorI5pointSaIS0_EEC2Ev:0000000000000000 _ZNSt6vectorI5pointSaIS0_EEC2Ev
     /tmp/ccJa8FUH.s:1245   .text._ZNSt12_Vector_baseI5pointSaIS0_EEC2Ev:0000000000000000 _ZNSt12_Vector_baseI5pointSaIS0_EEC2Ev
     /tmp/ccJa8FUH.s:1127   .text._ZNSt6vectorI5pointSaIS0_EED2Ev:0000000000000000 _ZNSt6vectorI5pointSaIS0_EED2Ev
     /tmp/ccJa8FUH.s:1365   .text._ZNSt12_Vector_baseI5pointSaIS0_EE19_M_get_Tp_allocatorEv:0000000000000000 _ZNSt12_Vector_baseI5pointSaIS0_EE19_M_get_Tp_allocatorEv
     /tmp/ccJa8FUH.s:1389   .text._ZSt8_DestroyIP5pointS0_EvT_S2_RSaIT0_E:0000000000000000 _ZSt8_DestroyIP5pointS0_EvT_S2_RSaIT0_E
     /tmp/ccJa8FUH.s:1275   .text._ZNSt12_Vector_baseI5pointSaIS0_EED2Ev:0000000000000000 _ZNSt12_Vector_baseI5pointSaIS0_EED2Ev
     /tmp/ccJa8FUH.s:1215   .text._ZNSt12_Vector_baseI5pointSaIS0_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseI5pointSaIS0_EE12_Vector_implD2Ev
     /tmp/ccJa8FUH.s:1460   .text._ZNSaI5pointED2Ev:0000000000000000 _ZNSaI5pointED2Ev
     /tmp/ccJa8FUH.s:1423   .text._ZNSt12_Vector_baseI5pointSaIS0_EE12_Vector_implC2Ev:0000000000000000 _ZNSt12_Vector_baseI5pointSaIS0_EE12_Vector_implC1Ev
     /tmp/ccJa8FUH.s:1491   .text._ZNSt12_Vector_baseI5pointSaIS0_EE13_M_deallocateEPS0_m:0000000000000000 _ZNSt12_Vector_baseI5pointSaIS0_EE13_M_deallocateEPS0_m
     /tmp/ccJa8FUH.s:1215   .text._ZNSt12_Vector_baseI5pointSaIS0_EE12_Vector_implD2Ev:0000000000000000 _ZNSt12_Vector_baseI5pointSaIS0_EE12_Vector_implD1Ev
     /tmp/ccJa8FUH.s:1528   .text._ZSt8_DestroyIP5pointEvT_S2_:0000000000000000 _ZSt8_DestroyIP5pointEvT_S2_
     /tmp/ccJa8FUH.s:1423   .text._ZNSt12_Vector_baseI5pointSaIS0_EE12_Vector_implC2Ev:0000000000000000 _ZNSt12_Vector_baseI5pointSaIS0_EE12_Vector_implC2Ev
     /tmp/ccJa8FUH.s:1562   .text._ZNSaI5pointEC2Ev:0000000000000000 _ZNSaI5pointEC2Ev
     /tmp/ccJa8FUH.s:1592   .text._ZN9__gnu_cxx13new_allocatorI5pointED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorI5pointED2Ev
     /tmp/ccJa8FUH.s:1617   .text._ZN9__gnu_cxx13new_allocatorI5pointE10deallocateEPS1_m:0000000000000000 _ZN9__gnu_cxx13new_allocatorI5pointE10deallocateEPS1_m
     /tmp/ccJa8FUH.s:1646   .text._ZNSt12_Destroy_auxILb1EE9__destroyIP5pointEEvT_S4_:0000000000000000 _ZNSt12_Destroy_auxILb1EE9__destroyIP5pointEEvT_S4_
     /tmp/ccJa8FUH.s:1671   .text._ZN9__gnu_cxx13new_allocatorI5pointEC2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorI5pointEC2Ev
     /tmp/ccJa8FUH.s:1693   .text:0000000000000bd6 _Z41__static_initialization_and_destruction_0ii
     /tmp/ccJa8FUH.s:1732   .text:0000000000000c16 _GLOBAL__sub_I__Z11resetPointsPSt6vectorI5pointSaIS0_EEPd
     /tmp/ccJa8FUH.s:1761   .rodata:0000000000000060 _ZZL18__gthread_active_pvE20__gthread_active_ptr
     /tmp/ccJa8FUH.s:1245   .text._ZNSt12_Vector_baseI5pointSaIS0_EEC2Ev:0000000000000000 _ZNSt12_Vector_baseI5pointSaIS0_EEC1Ev
     /tmp/ccJa8FUH.s:1275   .text._ZNSt12_Vector_baseI5pointSaIS0_EED2Ev:0000000000000000 _ZNSt12_Vector_baseI5pointSaIS0_EED1Ev
     /tmp/ccJa8FUH.s:1460   .text._ZNSaI5pointED2Ev:0000000000000000 _ZNSaI5pointED1Ev
     /tmp/ccJa8FUH.s:1562   .text._ZNSaI5pointEC2Ev:0000000000000000 _ZNSaI5pointEC1Ev
     /tmp/ccJa8FUH.s:1592   .text._ZN9__gnu_cxx13new_allocatorI5pointED2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorI5pointED1Ev
     /tmp/ccJa8FUH.s:1671   .text._ZN9__gnu_cxx13new_allocatorI5pointEC2Ev:0000000000000000 _ZN9__gnu_cxx13new_allocatorI5pointEC1Ev
                           .group:0000000000000000 _ZNSt6vectorI5pointSaIS0_EEC5Ev
                           .group:0000000000000000 _ZNSt6vectorI5pointSaIS0_EED5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseI5pointSaIS0_EE12_Vector_implD5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseI5pointSaIS0_EEC5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseI5pointSaIS0_EED5Ev
                           .group:0000000000000000 _ZNSt12_Vector_baseI5pointSaIS0_EE12_Vector_implC5Ev
                           .group:0000000000000000 _ZNSaI5pointED5Ev
                           .group:0000000000000000 _ZNSaI5pointEC5Ev
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorI5pointED5Ev
                           .group:0000000000000000 _ZN9__gnu_cxx13new_allocatorI5pointEC5Ev

UNDEFINED SYMBOLS
glBegin
glColor3ub
glVertex3f
glEnd
__gxx_personality_v0
_ZNSsC1Ev
_Z11load_pointsPSt6vectorI5pointSaIS0_EEPd
time
GAS LISTING /tmp/ccJa8FUH.s 			page 65


_ZSt4cout
_ZStlsISt11char_traitsIcEERSt13basic_ostreamIcT_ES5_PKc
_ZSt4endlIcSt11char_traitsIcEERSt13basic_ostreamIT_T0_ES6_
_ZNSolsEPFRSoS_E
glfwInit
_ZSt4cerr
glfwOpenWindow
glfwTerminate
glfwSetWindowTitle
glfwEnable
glEnable
glPointSize
glOrtho
glClearColor
glClear
glDrawArrays
glfwSwapBuffers
glfwPollEvents
glfwGetKey
glRotatef
glTranslatef
glfwGetMouseButton
glScalef
glLoadIdentity
glGetFloatv
glfwGetWindowParam
_ZNSsD1Ev
_Unwind_Resume
_ZdlPv
_ZNSt8ios_base4InitC1Ev
_ZNSt8ios_base4InitD1Ev
__dso_handle
__cxa_atexit
pthread_cancel
